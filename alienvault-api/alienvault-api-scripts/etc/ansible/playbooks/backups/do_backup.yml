---
# Configuration Backup
# Input params:
# database_host: database host
# database_password: user password
# database_username: database username
# backup_type: Type of Backup (configuration, environment, event_alarms)
# target: Host where should be done the backup
# Sample of usage:
# ansible-playbook -v --extra-vars="filename=configuration_ddbb_backup.1376393875.tar.gz
#                                   database=alienvault ddbb_host=192.168.230.5 database_user=root
#                                   ddbb_password=GqgDLUTN46 dst_folder=/tmp/" ddbb_backup.yml

- name: Backup Playbook
  #Not necessary
  gather_facts: False
  hosts: $target

  # Define the backup folder
  vars:
    backup_folder: /var/lib/ossim/backup/

  # Variables file
  vars_files:
    #- /etc/ossim/ansible/playbooks/backups/configuration/backup_vars.yml
    - ./{{backup_type}}/backup_vars.yml

  #Task list
  tasks:

    - name: Get the current date.
      action: shell executable=/bin/bash date '+%Y_%m_%d'
      register: CURRENT_DATE

    - name: Is profile db?
      action: shell executable=/bin/bash dpkg -l | grep alienvault-dummy-database | grep "^ii"
      register: IS_PROFILE_DB
      ignore_errors: yes

    - debug: msg="Is profile db? {{ IS_PROFILE_DB}}"
    - name: Create backup folder
      action: shell executable=/bin/bash mkdir -p {{backup_folder}}{{backup_type}}_database_backup_{{ CURRENT_DATE.stdout }}

    - debug: msg="BK Folder -> {{backup_folder}}{{backup_type}}_database_backup_{{ CURRENT_DATE.stdout }}"

    - name: Copy Alienvault files to backup folder
      action: shell executable=/bin/bash mysqldump alienvault {{ item }} -h {{ database_host }} -u {{ database_user }} -p{{ database_password }} -c -n -t -f --no-autocommit --skip-triggers --single-transaction --quick --hex-blob --insert-ignore > {{backup_folder}}{{backup_type}}_database_backup_{{ CURRENT_DATE.stdout }}/{{item}}_backup.sql
      with_items:  alienvault.tables
      when: IS_PROFILE_DB.rc == 0

    - name: Copy files AVCenter to backup folder
      action: shell executable=/bin/bash mysqldump avcenter {{ item }} -h {{ database_host }} -u {{ database_user }} -p{{ database_password }} -c -n -t -f --no-autocommit --skip-triggers --single-transaction --quick --hex-blob --insert-ignore > {{backup_folder}}{{backup_type}}_database_backup_{{ CURRENT_DATE.stdout }}/{{item}}_backup.sql
      with_items:  avcenter.tables
      when: IS_PROFILE_DB.rc == 0

    - name: Copy files Alienvault SIEM to backup folder
      action: shell executable=/bin/bash mysqldump alienvault_siem {{ item }} -h {{ database_host }} -u {{ database_user }} -p{{ database_password }} -c -n -t -f --no-autocommit --skip-triggers --single-transaction --quick --hex-blob --insert-ignore > {{backup_folder}}{{backup_type}}_database_backup_{{ CURRENT_DATE.stdout }}/{{item}}_backup.sql
      with_items:  alienvault_siem.tables
      when: IS_PROFILE_DB.rc == 0

    - name: Copy files Alienvault ASEC to backup folder
      action: shell executable=/bin/bash mysqldump alienvault_asec {{ item }} -h {{ database_host }} -u {{ database_user }} -p{{ database_password }} -c -n -t -f --no-autocommit --skip-triggers --single-transaction --quick --hex-blob --insert-ignore >{{backup_folder}}{{backup_type}}_database_backup_{{ CURRENT_DATE.stdout }}/{{item}}_backup.sql
      with_items:  alienvault_asec.tables
      when: IS_PROFILE_DB.rc == 0

    - name: Full Databases backups
      action: shell executable=/bin/bash mysqldump {{ item }} -h {{ database_host }} -u {{ database_user }} -p{{ database_password }} -c -n -t -f --no-autocommit --skip-triggers --single-transaction --quick --hex-blob --insert-ignore >{{backup_folder}}{{backup_type}}_database_backup_{{ CURRENT_DATE.stdout }}/{{item}}_backup.sql
      with_items: fulldatabases
      when: IS_PROFILE_DB.rc == 0

    - debug: msg="currentdate -> {{CURRENT_DATE}}"
    - debug: msg="bktype -> {{backup_type}}"

    - name: Compress the backup folder
      action: shell executable=/bin/bash tar -zcvf {{backup_folder}}{{backup_type}}_database_backup_{{ CURRENT_DATE.stdout }}.tar.gz --directory {{backup_folder}}{{backup_type}}_database_backup_{{ CURRENT_DATE.stdout }}/ .
      when: IS_PROFILE_DB.rc == 0

    - name: Remove the temporal folder
      action: shell executable=/bin/bash rm -rf {{backup_folder}}{{backup_type}}_database_backup_{{ CURRENT_DATE.stdout }}
      when: IS_PROFILE_DB.rc == 0

    # File Backups

    - debug: msg="Database backups already done.... Starting file backup"

    - name: Create backup folder
      action: shell executable=/bin/bash mkdir -p {{backup_folder}}{{ backup_type }}_files_backup_{{ CURRENT_DATE.stdout }}

    - name: Copy files to backup folder
      action: shell executable=/bin/bash cp -r {{ item }} {{backup_folder}}{{ backup_type }}_files_backup_{{ CURRENT_DATE.stdout }} || true
      with_items:  files

    - name: Compress the backup folder
      action: shell executable=/bin/bash tar -zcvf  {{backup_folder}}{{ backup_type }}_files_backup_{{ CURRENT_DATE.stdout }}.tar.gz --directory {{backup_folder}}{{ backup_type }}_files_backup_{{ CURRENT_DATE.stdout }}/ .

    - name: Remove the temporal folder
      action: command rm -rf {{backup_folder}}{{ backup_type }}_files_backup_{{ CURRENT_DATE.stdout }}
