<?php

require_once ('classes/Net.inc');
require_once ('classes/Session.inc');
require_once ("ossim_db.inc");

class Host_vulnerability {

    var $ip;
    var $scan_date;
    var $vulnerabitily;
    
    function Host_vulnerability ($ip, $scan_date, $vulnerability)
    {
        $this->ip               = $ip;
        $this->scan_date        = $scan_date;
        $this->vulnerability    = $vulnerability;
    }   
  
    function get_ip()               { return $this->ip; }
    function get_scan_date()        { return $this->scan_date; }
    function get_vulnerability()    { return $this->vulnerability; }

    function get_ip_vulnerability($conn, $ip, $scan_date){
        $sql = "SELECT * FROM host_vulnerability WHERE ip = ? AND scan_date = ?";
        $params = array($ip, $scan_date);
        if (!$rs = &$conn->Execute($sql, $params)){
            print $conn->ErrorMsg();
        } else {
            if (!$rs->EOF)
                return $rs->fields["vulnerability"];
            else {
                /* there is no vulnerability level for this host */
                return 0;
            }
        }
    }

    function get_scanned_hosts($conn, $scan_date){
        $sql = "SELECT count(*) count FROM host_vulnerability WHERE scan_date = ?";
        $params = array($scan_date);

        if (!$rs = &$conn->Execute($sql, $params)){
            print $conn->ErrorMsg();
        } else {
            if (!$rs->EOF)
                return $rs->fields["count"];
            else {
                /* No scanned hosts */
                return 0;
            }
        }
    }

    function get_list($conn, $where = "", $order = "", $aggregated = true, $limit = -1) 
    {

	if($aggregated == true){
		$query = OssimQuery("SELECT hostvul.ip, hostvul.scan_date, hostvul.vulnerability FROM (SELECT ip, max(scan_date) AS mymax FROM host_vulnerability group by ip) AS myvul, host_vulnerability AS hostvul WHERE hostvul.ip=myvul.ip AND hostvul.scan_date=myvul.mymax $order");
	} else {
        	$query = OssimQuery("SELECT * FROM host_vulnerability $where $order");
	}
        if (!$rs = &$conn->SelectLimit($query, $limit)) {
            print $conn->ErrorMsg();
        } else {
            while (!$rs->EOF) {
                if (Session::hostAllowed($conn, $rs->fields["ip"]))
                {
                    $list[] = new Host_vulnerability (
                                            $rs->fields["ip"],
                                            $rs->fields["scan_date"],
                                            $rs->fields["vulnerability"]);
                }
                $rs->MoveNext();
            }
        }
        return $list;
    }
   
    // A succesful scan must have inserted at least one host for that datetime 
    function scan_exists($conn, $scan_date){
        $sql = "SELECT * FROM host_vulnerability WHERE scan_date = ?";
        $params = array($scan_date);
        if (!$rs = &$conn->Execute($sql, $params)){
            print $conn->ErrorMsg();
        } else {
            if (!$rs->EOF)
                return 1; // There is data for this datetime.
            else {
                return 0; // There is no data for this datetime.
            }
        }
    }

    function in_host_vulnerability($conn, $ip) {
        $sql = "SELECT * FROM host_vulnerability WHERE ip = ?";
        $params = array($ip);
        if (!$rs = &$conn->Execute($sql, $params)) {
            print $conn->ErrorMsg();
        }
        return $rs->fields[0];
    }

}

?>
