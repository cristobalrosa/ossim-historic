<?php
/*****************************************************************************
*
*    License:
*
*   Copyright (c) 2003-2006 ossim.net
*   Copyright (c) 2007-2009 AlienVault
*   All rights reserved.
*
*   This package is free software; you can redistribute it and/or modify
*   it under the terms of the GNU General Public License as published by
*   the Free Software Foundation; version 2 dated June, 1991.
*   You may not use, modify or distribute this program under any other version
*   of the GNU General Public License.
*
*   This package is distributed in the hope that it will be useful,
*   but WITHOUT ANY WARRANTY; without even the implied warranty of
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*   GNU General Public License for more details.
*
*   You should have received a copy of the GNU General Public License
*   along with this package; if not, write to the Free Software
*   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
*   MA  02110-1301  USA
*
*
* On Debian GNU/Linux systems, the complete text of the GNU General
* Public License can be found in `/usr/share/common-licenses/GPL-2'.
*
* Otherwise you can read it here: http://www.gnu.org/licenses/gpl-2.0.txt
****************************************************************************/
/**
* Class and Function List:
* Function list:
* - Net_vulnerability()
* - get_net()
* - get_scan_date()
* - get_vulnerability()
* - get_net_vulnerability()
* - get_scanned_nets()
* - get_list()
* - insert()
* - delete()
* Classes list:
* - Net_vulnerability
*/
require_once ('classes/Net.inc');
require_once ('classes/Session.inc');
require_once ("ossim_db.inc");
class Net_vulnerability {
    var $net;
    var $scan_date;
    var $vulnerabitily;
    function Net_vulnerability($net, $scan_date, $vulnerability) {
        $this->net = $net;
        $this->scan_date = $scan_date;
        $this->vulnerability = $vulnerability;
    }
    function get_net() {
        return $this->net;
    }
    function get_scan_date() {
        return $this->scan_date;
    }
    function get_vulnerability() {
        return $this->vulnerability;
    }
    function get_net_vulnerability($conn, $net, $scan_date) {
        $sql = "SELECT * FROM net_vulnerability WHERE net = ? AND scan_date = ?";
        $params = array(
            $net,
            $scan_date
        );
        if (!$rs = & $conn->Execute($sql, $params)) {
            print $conn->ErrorMsg();
        } else {
            if (!$rs->EOF) return $rs->fields["vulnerability"];
            else {
                /* there is no vulnerability level for this net */
                return 0;
            }
        }
    }
    function get_scanned_nets($conn, $scan_date) {
        $sql = "SELECT count(*) count FROM net_vulnerability WHERE scan_date = ?";
        $params = array(
            $scan_date
        );
        if (!$rs = & $conn->Execute($sql, $params)) {
            print $conn->ErrorMsg();
        } else {
            if (!$rs->EOF) return $rs->fields["count"];
            else {
                /* No scanned nets*/
                return 0;
            }
        }
    }
    function get_list($conn, $where = "", $order = "", $aggregated = false) {
        $list = array();
        if ($aggregated == true) {
            $query = OssimQuery("SELECT netvul.net, netvul.scan_date, netvul.vulnerability FROM (SELECT net, max(scan_date) AS mymax FROM net_vulnerability group by net) AS myvul, net_vulnerability AS netvul WHERE netvul.net=myvul.net AND netvul.scan_date=myvul.mymax $order");
        } else {
            $query = OssimQuery("SELECT * FROM net_vulnerability $where $order");
        }
        if (!$rs = & $conn->Execute($query)) {
            print $conn->ErrorMsg();
        } else {
            while (!$rs->EOF) {
                if (Session::netAllowed($conn, $rs->fields["net"])) {
                    $list[] = new Net_vulnerability($rs->fields["net"], $rs->fields["scan_date"], $rs->fields["vulnerability"]);
                }
                $rs->MoveNext();
            }
        }
        return $list;
    }
    function insert($conn, $net, $vulnerability) {
        $vulnerability = intval($vulnerability);
        $sql = "INSERT INTO net_vulnerability VALUES (?, NOW(), ?)";
        $params = array(
            $net,
            $vulnerability
        );
        if ($conn->Execute($sql, $params) === false) {
            print 'error inserting: ' . $conn->ErrorMsg() . '<BR>';
            exit;
        }
    }
    function delete($conn, $net_name, $where = "") {
        $query = OssimQuery("DELETE FROM net_vulnerability WHERE net = '$net_name' $where ");
        if ($conn->Execute($query) === false) {
            print 'error deleting: ' . $conn->ErrorMsg() . '<BR>';
            exit;
        }
    }
}
?>
