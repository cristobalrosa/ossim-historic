<?php
require_once 'classes/Security.inc';
require_once 'ossim_acl.inc';
require_once 'ossim_conf.inc';
require_once 'ossim_db.inc';
require_once 'classes/About.inc';

class Upgrade
{
    var $upgrades_path;
    var $conn;
    var $conf; // $GLOBALS["CONF"] from ossim_conf.inc
    var $about;
    var $ossim_dbtype;
    /*
     * Hardcoded inside include/classes/About.inc
     */
    var $ossim_current_version;
    /*
     * This property is stored in DB (table "conf"). Quering the
     * schema version we can detect if Ossim packages were updated
     * but not the dabase
     */
    var $ossim_schema_version;
    
    function Upgrade()
    {
        $ds = DIRECTORY_SEPARATOR;
        $path = dirname(__FILE__) . $ds . '..' . $ds . 'upgrades';
        if (is_dir($path)) {
            // realpath() returns null if no path and we need to show the error
            $this->upgrades_path = realpath($path);
        } else {
            $this->upgrades_path = $path;
        }
        
        $db = new ossim_db();
        $this->conn = $db->connect();
        
        $this->conf = $GLOBALS["CONF"];
        $this->ossim_dbtype = $this->conf->get_conf("ossim_type"); // ej: mysql
        $this->about = new About();
        $this->ossim_current_version = $this->about->get_version(); // ej: 0.9.8
        $this->ossim_schema_version  = $this->conf->get_conf("ossim_schema_version", false);
    }

    /*
     * Detects if a database needs upgrade
     */
    function needs_upgrade()
    {
        // Detected old version without schema version tracking
        // we need at least schema version 0.9.8
        if (!$this->ossim_schema_version) {
            // try to guess the version quering properties added in 0.9.8
            if (!$this->conf->get_conf("ossim_link", false)) {
                ossim_set_error(_("Sorry, before run this script you need to " .
                                  "upgrade the database to version >= 0.9.8"));
            } elseif ($this->conf->get_conf("nagios_link", false)) {
                ossim_set_error(_("Detected uncompleted 0.9.9 schema (CVS version?). " .
                                  "Please complete manually the upgrade to at least 0.9.9rc1"));
            } else {
                $this->ossim_schema_version = '0.9.8';
            }
            return true;
        }
        $oss_ver  = $this->ossim_current_version;
        $oss_schm = $this->ossim_schema_version;
        // The schema is greater than the ossim version, just wierd
        if (version_compare($oss_schm, $oss_ver, 'gt')) {
            ossim_set_error(_("Detected schema version greater than ossim version, " .
                              "please upgrade Ossim"));
            return true;
        }
        // Normal case found when just upgraded ossim packages but not the DB
        if (version_compare($oss_schm, $oss_ver, 'lt')) {
            return true;
        }
        return false;
    }

    /*
     * Array
        (
            [0.9.9] => Array
            (
                [php] => Array
                (
                    [file] => /home/tvvcox/os-sim/include/upgrades/0.9.9.php
                    [dbtype] => 
                )
            )
        )
     */
    function get_all()
    {
        static $upgrades = array();
        if (count($upgrades)) {
            return $upgrades;
        }
        if (!$dir = dir($this->upgrades_path)) {
            die("Could not open upgrades path: '{$this->upgrades_path}'");
        }
        while (($file = $dir->read()) !== false) {
            if ($file == '.' || $file == '..') {
                continue;
            }
            //$file = '0.9.9_mysql.sql'; // for testing
            /*
             * Formats allowed:
             *  - <version>.php
             *  - <version>_<db_type>.sql
             */
             if (!preg_match('/(.+)\.([^.]+)$/', $file, $m)) continue;
             $name = $m[1];
             $type = $m[2];
             if ($type == 'sql') {
                list($version, $dbtype) = explode('_', $name);
             } elseif ($type == 'php') {
                $version = $name;
                $dbtype  = null;
             } else {
                 continue;
             }
             $file = $this->upgrades_path . DIRECTORY_SEPARATOR . $file;
             $upgrades[$version][$type] = array('file' => $file,
                                                'dbtype' => $dbtype);
        }
        // sort the array using version_compare()
        uksort($upgrades, array($this, 'sort_by_version'));
        //printr($upgrades);
        return $upgrades;
    }

    function get_needed()
    {
        static $upgrades = array();
        if (count($upgrades)) {
            return $upgrades;
        }
        $oss_ver  = $this->ossim_current_version;
        $oss_schm = $this->ossim_schema_version;
        $oss_dbtype = $this->ossim_dbtype;
        $db_req_upgrade = array();
        
        foreach ($this->get_all() as $version => $data) {
            foreach ($data as $type => $options) {
                $file   = $options['file'];
                $dbtype = $options['dbtype'];
                if ($type == 'sql') {
                    $db_req_upgrade[] = $version;
                    if ($dbtype != $oss_dbtype) {
                        continue;
                    }
                }
                if (version_compare($version, $oss_schm, 'gt') &&
                    version_compare($version, $oss_ver, 'le'))
                {
                   $upgrades[$version][$type] = array('file' => $file,
                                                      'dbtype' => $dbtype);
                }
            }
        }
        // User case: there is a 0.9.9_mysql.sql file, but the user's
        // database is pgsql. Maybe the developers haven't created a .sql
        // file for that engine. Detect this case.
        foreach ($db_req_upgrade as $req) {
            if (version_compare($req, $oss_schm, 'gt') &&
                version_compare($req, $oss_ver, 'le'))
            {
                $found = false;
                do {
                    if (!isset($upgrades[$req])) break;
                    foreach ($upgrades[$req] as $type => $data) {
                        if ($type == 'sql'  && $data['dbtype'] == $oss_dbtype) {
                            $found = true;
                            break 2;
                        }
                    }
                } while (false);
                if (!$found) {
                    $upgrades[$version]['error'] = array(
                                                  'file' => _("No sql file found for database: ").$oss_dbtype,
                                                  'dbtype' => null);
                }
            }
        }
        //printr($upgrades);
        return $upgrades;
    }

    function sort_by_version($a, $b)
    {
        if (version_compare($a, $b, 'eq')) return 0;
        return version_compare($a, $b, 'gt') ? 1 : -1;
    }

    function execute_sql($sql_file, $force = false)
    {
        $database = escapeshellarg($this->conf->get_conf('ossim_base'));
        $user = escapeshellarg($this->conf->get_conf('ossim_user'));
        $pass = escapeshellarg($this->conf->get_conf('ossim_pass'));
        $host = escapeshellarg($this->conf->get_conf('ossim_host'));
        $port = escapeshellarg($this->conf->get_conf('ossim_port'));
        
        switch ($this->ossim_dbtype) {
            case 'mysql':
                $force = $force ? '-f' : '';
                $pass  = $pass ? "-p{$pass}" : '';
                $cmd = "cat $sql_file | mysql $force -v -u$user $pass -h$host -P$port $database";
                break;
            default:
                die("Database engine not supported yet");
        }
        echo '<pre>';
        passthru("$cmd 2>&1", $ret);
        echo '</pre>';
        if ($ret !== 0) {
            echo "Failed to apply SQL schema upgrade file '$sql_file'. Command failed:<br><b>$cmd</b><br>";
            exit;
        }
    }

    function create_php_upgrade_object($php_file, $version)
    {
        // Create the new upgrade object
        include "$php_file";
        $class = 'upgrade_' . str_replace('.', '', $version);
        if (!class_exists($class)) {
            die("Invalid class: '$class' for PHP upgrade script");
        }
        $this->php = new $class;
        // Make some useful properties available to it
        $this->php->conn  = &$this->conn;
        $this->php->conf  = &$this->conf;
        $this->php->about = &$this->about;
        $this->php->ossim_dbtype = $this->ossim_dbtype;
        $this->php->ossim_current_version = $this->ossim_current_version;
        $this->php->ossim_schema_version  = $this->ossim_schema_version;
    }

    function destroy_php_upgrade_object()
    {
        unset($this->php);
    }

    function apply_needed()
    {
        $needed = $this->get_needed();
        foreach ($needed as $version => $actions) {
            $sql_exec = isset($actions['sql']) ? $actions['sql']['file'] : false;
            $php_exec = isset($actions['php']) ? $actions['php']['file'] : false;
            if ($php_exec) {
                $this->create_php_upgrade_object($php_exec, $version);
                // Apply pre upgrade actions
                echo "<pre>"._("Starting PHP PRE script")."...\n";
                $this->php->start_upgrade();
                echo "\n"._("PHP PRE script ended")."</pre>";
            }
            if ($sql_exec) {
                $this->execute_sql($sql_exec);
            }
            if ($php_exec) {
                // Apply post upgrade actions
                echo "<pre>"._("Starting PHP POST script")."...\n";
                $this->php->end_upgrade();
                echo "\n"._("PHP POST script ended")."</pre>";
                $this->destroy_php_upgrade_object();
            }
        }                 
    }

}
?>
