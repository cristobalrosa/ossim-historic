diff -urNb base-1.1.2/base_common.php base-1.1.2-ossim/base_common.php
--- base-1.1.2/base_common.php	Sat Apr  9 01:38:34 2005
+++ base-1.1.2-ossim/base_common.php	Mon Apr 11 17:29:47 2005
@@ -18,6 +18,12 @@
 ********************************************************************************
 */
 
+/* OSSIM session */
+if ($use_ossim_session) {
+   require_once ('classes/Session.inc');
+   Session::logcheck($ossim_acid_aco_section, $ossim_acid_aco, $ossim_login_path);
+}
+
 function GetSensorIDs($db)
 {
    $result = $db->baseExecute("SELECT sid FROM sensor;");
diff -urNb base-1.1.2/base_conf.php.dist base-1.1.2-ossim/base_conf.php.dist
--- base-1.1.2/base_conf.php.dist	Sat Apr  9 01:38:34 2005
+++ base-1.1.2-ossim/base_conf.php.dist	Mon Apr 11 17:29:47 2005
@@ -111,6 +111,18 @@
  */
 $use_referential_integrity = 0;
 
+/* Use OSSIM session
+ *   1  : use
+ *   0  : ignore
+ * Ossim framework and acid must be instaled in the same host
+ */
+$use_ossim_session = 0;
+$ossim_login_path = "/ossim/session/login.php";
+$ossim_acid_aco_section = "MenuControlPanel";
+$ossim_acid_aco = "ControlPanelAlerts";
+$ossim_domain_aco_section = "DomainAccess";
+$ossim_domain_aco = "Nets";
+
 /* Variable to start the ability to handle themes... */
 $base_style = "base_style.css";
 
diff -urNb base-1.1.2/base_hdr2.php base-1.1.2-ossim/base_hdr2.php
--- base-1.1.2/base_hdr2.php	Sat Apr  9 01:38:34 2005
+++ base-1.1.2-ossim/base_hdr2.php	Mon Apr 11 17:29:47 2005
@@ -12,7 +12,18 @@
 }
 
 echo "</td>"
-. "</tr>"
-. "</table></div>";
+. "</tr>";
+?>
+<tr>
+    <TD class="menuitem"><FONT
+color="FFFF66"><B>Cached:&nbsp&nbsp</B></FONT>
+        <A class="menuitem" href="base_stat_alerts.html">Uniq</A> &nbsp&nbsp|&nbsp&nbsp
+        <A class="menuitem" href="base_stat_uaddr1.html">Src</A> &nbsp&nbsp|&nbsp&nbsp
+        <A class="menuitem" href="base_stat_uaddr2.html">Dst</A> &nbsp&nbsp|&nbsp&nbsp
+        <A class="menuitem" href="base_stat_ports2.html">Dst Port</A>
+    </td>
+    </tr>
+<?php
+echo "</table></div>";
 
 ?>
diff -urNb base-1.1.2/base_qry_common.php base-1.1.2-ossim/base_qry_common.php
--- base-1.1.2/base_qry_common.php	Sat Apr  9 01:38:34 2005
+++ base-1.1.2-ossim/base_qry_common.php	Mon Apr 11 17:29:47 2005
@@ -497,7 +497,10 @@
   $sig_join_sql = "";
 
   $sql = "SELECT acid_event.sid, acid_event.cid, signature, timestamp, ".
-         "acid_event.ip_src, acid_event.ip_dst, acid_event.ip_proto FROM acid_event";
+           "acid_event.ip_src, acid_event.ip_dst, acid_event.ip_proto, ". 
+           "acid_event.ossim_type, acid_event.ossim_priority, acid_event.ossim_reliability, ".
+           "acid_event.ossim_asset_src, acid_event.ossim_asset_dst, ".
+           "acid_event.ossim_risk_c, acid_event.ossim_risk_a FROM acid_event";
  
   // This needs to be examined!!! -- Kevin
   $where_sql = " WHERE ";
@@ -541,6 +544,13 @@
   $data_cnt = $cs->criteria['data']->GetFormItemCnt();
   $data_encode = $cs->criteria['data']->data_encode;
 
+  /* OSSIM */
+  $ossim_type = $cs->criteria['ossim_type']->criteria;
+  $ossim_priority = $cs->criteria['ossim_priority']->criteria;
+  $ossim_reliability = $cs->criteria['ossim_reliability']->criteria;
+  $ossim_asset_dst = $cs->criteria['ossim_asset_dst']->criteria;
+  $ossim_risk_a = $cs->criteria['ossim_risk_a']->criteria;
+
   $tmp_meta = "";
   /* Sensor */
   if ( $sensor != "" && $sensor != " " )
@@ -620,6 +630,79 @@
   /* Date/Time */
   if ( DateTimeRows2sql($time, $time_cnt, $tmp_meta) == 0 )
      $cs->criteria['time']->SetFormItemCnt(0);
+
+     /*
+     * OSSIM Code
+     */
+     
+     /* OSSIM Type */
+     if ( $ossim_type[1] != " " && $ossim_type[1] != "" && $ossim_type[1] != "0")
+     {
+       $tmp_meta = $tmp_meta." AND ossim_type = '".$ossim_type[1]."'";
+     }
+     else if ($ossim_type[1] == "0")
+     {
+        $tmp_meta = $tmp_meta." AND (ossim_type is null OR ossim_type = '0')";
+     }
+     else
+        $cs->criteria['ossim_type']->Set("");
+     
+    
+     /* OSSIM Priority */
+     if ( $ossim_priority[1] != " " && $ossim_priority[1] != "" &&
+     $ossim_priority[1] != "0")
+     {
+        $tmp_meta = $tmp_meta." AND ossim_priority  ".$ossim_priority[0]." '".$ossim_priority[1]."'";
+     }
+     else if ($ossim_priority[1] == "0")
+     {
+        $tmp_meta = $tmp_meta." AND (ossim_priority is null OR ossim_priority = '0')";
+     }
+     else
+        $cs->criteria['ossim_priority']->Set("");
+  /* OSSIM Reliability */
+  if ( $ossim_reliability[1] != " " && $ossim_reliability[1] != "" && $ossim_reliability[1] != "0")
+  {
+     $tmp_meta = $tmp_meta." AND ossim_reliability ".$ossim_reliability[0]." '".$ossim_reliability[1]."'";
+  }
+  else if ($ossim_reliability[1] == "0")
+  {
+     $tmp_meta = $tmp_meta." AND (ossim_reliability is null OR ossim_reliability = '0')";
+  }
+  else
+     $cs->criteria['ossim_reliability']->Set("");
+
+  /* OSSIM Asset DST */
+  if ( $ossim_asset_dst[1] != " " && $ossim_asset_dst[1] != "" && $ossim_asset_dst[1] != "0")
+  {
+     $tmp_meta = $tmp_meta." AND ossim_asset_dst ".$ossim_asset_dst[0]." '".$ossim_asset_dst[1]."'";
+  }
+  else if ($ossim_asset_dst[1] == "0")
+  {
+     $tmp_meta = $tmp_meta." AND (ossim_asset_dst is null OR ossim_asset_dst = '0')";
+  }
+  else
+     $cs->criteria['ossim_asset_dst']->Set("");
+
+  /* OSSIM Risk A */
+  if ( $ossim_risk_a != " " && $ossim_risk_a != "" && $ossim_risk_a != "0")
+  {
+     if ($ossim_risk_a == "low") {
+    $tmp_meta = $tmp_meta." AND ossim_risk_a >= 1 AND ossim_risk_a <= 4 ";
+     } else if ($ossim_risk_a == "medium") {
+    $tmp_meta = $tmp_meta." AND ossim_risk_a >= 5 AND ossim_risk_a <= 7 ";
+     } else if ($ossim_risk_a == "high") {
+    $tmp_meta = $tmp_meta." AND ossim_risk_a >= 8 AND ossim_risk_a <= 10 ";
+     }
+  }
+  else
+     $cs->criteria['ossim_risk_a']->Set("");
+
+  /* Date/Time */
+  if ( DateTimeRows2sql($time, $time_cnt, $tmp_meta) == 0 )
+     $cs->criteria['time']->SetFormItemCnt(0);
+
+     
 
   $criteria_sql = $criteria_sql.$tmp_meta;
 
diff -urNb base-1.1.2/base_qry_common.php.orig base-1.1.2-ossim/base_qry_common.php.orig
--- base-1.1.2/base_qry_common.php.orig	Thu Jan  1 01:00:00 1970
+++ base-1.1.2-ossim/base_qry_common.php.orig	Sat Apr  9 01:38:34 2005
@@ -0,0 +1,857 @@
+<?php
+/*******************************************************************************
+** Basic Analysis and Security Engine (BASE)
+** Copyright (C) 2004 BASE Project Team
+** Copyright (C) 2000 Carnegie Mellon University
+**
+** (see the file 'base_main.php' for license details)
+**
+** Project Leads: Kevin Johnson <kjohnson@secureideas.net>, Joel Esler <joelesler@users.sourceforge.net>
+** Built upon work by Roman Danyliw <rdd@cert.org>, <roman@danyliw.com>
+**
+** Purpose: support routines for processing criteria
+********************************************************************************
+** Authors:
+********************************************************************************
+** Kevin Johnson <kjohnson@secureideas.net
+**
+********************************************************************************
+*/
+
+include_once("$BASE_path/includes/base_signature.inc.php");
+
+function PrintCriteriaState()
+{
+   GLOBAL $layer4, $new, $submit, $sort_order, $num_result_rows,
+          $current_view, $caller, $action, $action_arg, $sort_order;
+
+   if ( $GLOBALS['debug_mode'] >= 2 )
+   {
+      echo "<PRE>";
+      echo "<B>"._SENSOR.":</B> ".$_SESSION['sensor']."<BR>\n".
+           "<B>AG:</B> ".$_SESSION['ag']."<BR>\n".
+           "<B>"._QCSIG."</B>\n";
+      print_r($_SESSION['sig']);
+      echo "<BR><B>"._TIME." (".$_SESSION['time_cnt']."):</B><BR>";
+      print_r($_SESSION['time']);
+      echo "<BR><B>"._QCIPADDR." (".$_SESSION['ip_addr_cnt']."):</B><BR>";
+      print_r($_SESSION['ip_addr']);
+      echo "<BR><B>"._QCIPFIELDS." (".$_SESSION['ip_field_cnt']."):</B><BR>";
+      print_r($_SESSION['ip_field']);
+      echo "<BR><B>"._QCTCPPORTS." (".$_SESSION['tcp_port_cnt']."):</B><BR>";
+      print_r($_SESSION['tcp_port']);
+      echo "<BR><B>"._QCTCPFLAGS."</B><BR>";
+      print_r($_SESSION['tcp_flags']);
+      echo "<BR><B>"._QCTCPFIELD." (".$_SESSION['tcp_field_cnt']."):</B><BR>";
+      print_r($_SESSION['tcp_field']);
+      echo "<BR><B>"._QCUDPPORTS." (".$_SESSION['udp_port_cnt']."):</B><BR>";
+      print_r($_SESSION['udp_port']);
+      echo "<BR><B>"._QCUDPFIELDS." (".$_SESSION['udp_field_cnt']."):</B><BR>";
+      print_r($_SESSION['udp_field']);
+      echo "<BR><B>"._QCICMPFIELDS." (".$_SESSION['icmp_field_cnt']."):</B><BR>";
+      print_r($_SESSION['icmp_field']);
+      echo "<BR><B>RawIP field (".$_SESSION['Rawip_field_cnt']."):</B><BR>";
+      print_r($_SESSION['rawip_field']);
+      echo "<BR><B>"._QCDATA." (".$_SESSION['data_cnt']."):</B><BR>";
+      print_r($_SESSION['data']);
+      echo "</PRE>";
+   }
+
+   if ( $GLOBALS['debug_mode'] >= 1 )
+   {
+      echo "<PRE>
+            <B>new:</B> '$new'   
+            <B>submit:</B> '$submit'
+            <B>sort_order:</B> '$sort_order'
+            <B>num_result_rows:</B> '$num_result_rows'  <B>current_view:</B> '$current_view'
+            <B>layer4:</B> '$layer4'  <B>caller:</B> '$caller'
+            <B>action:</B> '$action'  <B>action_arg:</B> '$action_arg'
+            </PRE>";
+   }
+}
+
+function FieldRows2sql($field, $cnt, &$s_sql)
+{
+  $tmp2 = "";
+  for ( $i = 0; $i < $cnt; $i++ )
+  {
+      $tmp = "";
+      if ( $field[$i][3] != "" && $field[$i][1] != " ")
+      {
+         $tmp = $field[$i][0]." ".$field[$i][1]." ".$field[$i][2]." '".
+                $field[$i][3]."' ".$field[$i][4]." ".$field[$i][5];
+      }
+      else
+      {
+         if ( $field[$i][3] != "" && $field[$i][1] == " ")
+            ErrorMessage("<B>"._QCERRCRITWARN."</B> "._QCERRVALUE." '".$field[$i][3]."' "._QCERRSPECFIELD);
+         if ( ($field[$i][1] != " " && $field[$i][1] != "") && $field[$i][3] == "" )
+            ErrorMessage("<B>"._QCERRCRITWARN."</B> "._QCERRFIELD." '".$field[$i][1]."' "._QCERRSPECVALUE);
+      }
+      $tmp2 = $tmp2.$tmp;
+
+      if ( $i > 0 && $field[$i-1][5] == ' ' )
+         ErrorMessage("<B>"._QCERRCRITWARN."</B> "._QCERRBOOLEAN);
+  }
+
+  if ( $tmp2 != "" )
+  {
+     $s_sql = $s_sql." AND ( ".$tmp2." )";
+     return 1;
+  }
+
+  return 0;
+}
+
+function formatTimeDigit($time_digit)
+{
+   if ( strlen($time_digit) == 2 )
+      return $time_digit;
+   else
+      return ('0'.$time_digit);
+}
+
+function addSQLItem(&$sstring, $what_to_add)
+{
+   $sstring = (strlen($sstring) == 0 ) ? "($what_to_add" : "$sstring AND $what_to_add";
+}
+
+function DateTimeRows2sql($field, $cnt, &$s_sql)
+{
+  GLOBAL $db;
+  $tmp2 = "";
+  for ( $i = 0; $i < $cnt; $i++ )
+  {
+      $tmp = "";
+      if ( isset($field[$i]) && $field[$i][1] != " " && $field[$i][1] != "")
+      {
+         $op = $field[$i][1];
+     
+         $t = "";
+
+         /* Build the SQL string when >, >=, <, <= operator is used */
+         if ( $op != "=" )
+         {
+            /* date */
+            if ( $field[$i][4] != " " )
+            {
+               /* create the date string */
+               $t = $field[$i][4];                             /* year */
+               if ( $field[$i][2] != " " )
+               {
+                  $t = $t."-".$field[$i][2];                       /* month */
+                  if ( $field[$i][3] != "" )
+                     $t = $t."-".FormatTimeDigit($field[$i][3]);   /* day */                
+                  else
+                     $t = $t."-01";
+               }
+               else
+                  $t = $t."-01-01";
+            }
+            /* time */
+            // For MSSQL, you must have colons in the time fields. 
+            // Otherwise, the DATEDIFF function will return Arithmetic Overflow
+            if ( $field[$i][5] != "" )
+            {
+               $t = $t." ".FormatTimeDigit($field[$i][5]);         /* hour */
+               if ( $field[$i][6] != "" )
+               {
+                  if ($db_DB_type != "mssql")
+                    $t = $t.FormatTimeDigit($field[$i][6]);          /* minute */
+                  else
+                    $t = $t.":".FormatTimeDigit($field[$i][6]);
+                  if ( $field[$i][7] != "" )
+                     if ($db->DB_type != "mssql")
+                       $t = $t.FormatTimeDigit($field[$i][7]);
+                     else
+                       $t = $t.":".FormatTimeDigit($field[$i][7]);
+                  else
+                     if ($db->DB_type != "mssql")
+                       $t = $t."00"; //":00";
+                     else
+                       $t = $t.":00";
+               }
+               else
+                  if ($db->DB_type != "mssql")
+                    $t = $t."0000";  //":00:00";
+                  else
+                    $t = $t.":00:00";
+            }
+            /* fixup if have a > by adding an extra day */
+            else if ( $op == ">" && $field[$i][4] != " " )
+                $t = $t." 23:59:59";
+            /* fixup if have a <= by adding an extra day */
+            else if ( $op == "<=" && $field[$i][4] != " " )
+                $t = $t." 23:59:59";
+            
+            /* neither date or time */
+            if ( $field[$i][4] == " " && $field[$i][5] == "" )
+               ErrorMessage("<B>"._QCERRCRITWARN."</B> "._QCERROPER." '".$field[$i][1].
+                            "' "._QCERRDATEVALUE);
+            
+            /* date or date/time */
+            else if ( ($field[$i][4] != " " && $field[$i][5] != "") || $field[$i][4] != " ")
+              $tmp = $field[$i][0]." timestamp ".$op."'$t'".$field[$i][8].' '.$field[$i][9]; 
+
+            /* time */
+            else if ( ($field[$i][5] != " ") && ($field[$i][5] != "") )
+            {
+               ErrorMessage("<B>"._QCERRCRITWARN."</B> "._QCERRINVHOUR);
+            }
+         }
+
+         /* Build the SQL string when the = operator is used */
+         else
+         {
+            /* date */
+            if ( $field[$i][4] != " " ) 
+               addSQLItem($tmp, $db->baseSQL_YEAR("timestamp", "=", $field[$i][4]) );
+            if ( $field[$i][2] != " " ) 
+               addSQLItem($tmp, $db->baseSQL_MONTH("timestamp", "=", $field[$i][2]) );
+            if ( $field[$i][3] != ""  ) 
+               addSQLItem($tmp, $db->baseSQL_DAY("timestamp", "=", $field[$i][3]) );
+
+            /* time */
+            if ( $field[$i][5] != "" ) 
+               addSQLItem($tmp, $db->baseSQL_HOUR("timestamp", "=", $field[$i][5]) );
+            if ( $field[$i][6] != "" ) 
+               addSQLItem($tmp, $db->baseSQL_MINUTE("timestamp", "=", $field[$i][6]) );
+            if ( $field[$i][7] != "" ) 
+               addSQLItem($tmp, $db->baseSQL_SECOND("timestamp", "=", $field[$i][7]) );
+
+            /* neither date or time */
+            if ( $tmp == "" )
+               ErrorMessage("<B>"._QCERRCRITWARN."</B> "._QCERROPER." '".$field[$i][1].
+                            "' "._QCERRDATECRIT);
+            else
+               $tmp = $field[$i][0].$tmp.')'.$field[$i][8].$field[$i][9];
+         }
+      }
+      else
+      {
+         if ( isset($field[$i]) )
+         {
+           if ( ($field[$i][2] != " " || $field[$i][3] != "" || $field[$i][4] != " ") && 
+               $field[$i][1] == " ")
+              ErrorMessage("<B>"._QCERRCRITWARN."</B> "._QCERRDATETIME." '".
+                            $field[$i][2]."-".$field[$i][3]."-".$field[$i][4]." ".
+                            $field[$i][5].":".$field[6].":".$field[7]."' "._QCERROPERSELECT);
+         }
+      }
+
+      if ( $i > 0 && $field[$i-1][9] == ' ' && $field[$i-1][4] != " ")
+         ErrorMessage("<B>"._QCERRCRITWARN."</B> "._QCERRDATEBOOL);
+      $tmp2 = $tmp2.$tmp;
+  }
+
+  if ( $tmp2 != "" )
+  {
+     $s_sql = $s_sql." AND (".$tmp2.") ";
+     return 1;
+  }
+
+  return 0;
+}
+
+function FormatPayload($payload_str, $data_encode)
+/* Accepts a payload string and decides whether any conversion is necessary
+   to create a sql call into the DB.  Currently we only are concerned with
+   hex <=> ascii. 
+ */
+{
+  /* if the source is hex strip out any spaces and \n */
+  if ( $data_encode == "hex" )
+  {
+     $payload_str = str_replace("\n", "", $payload_str);
+     $payload_str = str_replace(" ", "", $payload_str);
+  }
+
+  /* If both the source type and conversion type are the same OR
+        no conversion type is specified THEN return the plain string */
+  if ( ($data_encode[0] == $data_encode[1]) ||
+       $data_encode[1] == " " )
+       return $payload_str;
+  else
+  {
+     $tmp = "";
+
+     /* hex => ascii */
+     if ( $data_encode[0] == "hex" && $data_encode[1] == "ascii" )
+        for ( $i = 0; $i < strlen($payload_str); $i += 2)
+        {
+            $t = hexdec($payload_str[$i].$payload_str[$i+1]);
+                 
+            if ( $t > 32 && $t < ord("z"))
+                 $tmp = $tmp.chr($t);
+            else
+                 $tmp = $tmp.'.';
+        }
+
+     /* ascii => hex */
+     else if ( $data_encode[0] == "ascii" && $data_encode[1] == "hex" )
+        for ( $i = 0; $i < strlen($payload_str); $i++ )
+            $tmp = $tmp.dechex(ord($payload_str[$i]));
+
+     return $tmp;
+  }
+
+  return "";    /* should be unreachable */
+}
+
+function DataRows2sql($field, $cnt, $data_encode, &$s_sql)
+{
+  $tmp2 = "";
+  for ( $i = 0; $i < $cnt; $i++ )
+  {
+      $tmp = "";
+      if ( $field[$i][2] != "" && $field[$i][1] != " ")
+      {
+         $tmp = $field[$i][0]." data_payload ".$field[$i][1]." '%".FormatPayload($field[$i][2], $data_encode).
+                "%' ".$field[$i][3]."".$field[$i][4]." ".$field[$i][5];
+      }
+      else
+      {
+         if ( $field[$i][2] != "" && $field[$i][1] == " ")
+            ErrorMessage("<B>"._QCERRCRITWARN."</B> "._QCERRPAYLOAD." '".$field[$i][2]."' "._QCERRPAYCRITOPER);
+         if ( ($field[$i][1] != " " && $field[$i][1] != "") && $field[$i][2] == "" )
+            ErrorMessage("<B>"._QCERRCRITWARN."</B> "._QCERROPER." '".$field[$i][1]."' "._QCERRPAYCRITVALUE);
+      }
+      $tmp2 = $tmp2.$tmp;
+
+      if ( $i > 0 && $field[$i-1][4] == ' ' )
+         ErrorMessage("<B>"._QCERRCRITWARN."</B> "._QCERRPAYBOOL);
+  }
+
+  if ( $tmp2 != "" )
+  {
+     $s_sql = $s_sql." AND ( ".$tmp2." )";
+     return 1;
+  }
+
+  return 0;
+}
+
+function PrintCriteria($caller)
+{
+  GLOBAL $db, $cs, $last_num_alerts, $save_criteria;
+
+  /* Generate the Criteria entered into a human readable form */  
+  $save_criteria = '
+   <TABLE CELLSPACING=1 CELLPADDING=2 BORDER=0 BGCOLOR="#FFFFFF">
+    <TR>
+        <TD CLASS="metatitle">'._QCMETACRIT.'</TD>
+        <TD>';
+
+  /* If printing any of the LAST-X stats then ignore all the other criteria */
+  if (  $caller == "last_tcp" || $caller == "last_udp" || 
+        $caller == "last_icmp" || $caller == "last_any" ) 
+  {
+    $save_criteria = $save_criteria.'&nbsp;&nbsp;';
+    if ( $caller == "last_tcp" )
+       $save_criteria .= _LAST.' '.$last_num_alerts.' TCP '._ALERT; 
+    else if ( $caller == "last_udp" )
+       $save_criteria .= _LAST.' '.$last_num_alerts.' UDP '._ALERT; 
+    else if ( $caller == "last_icmp" )
+       $save_criteria .= _LAST.' '.$last_num_alerts.' ICMP '._ALERT; 
+    else if ( $caller == "last_any" )
+       $save_criteria .= _LAST.' '.$last_num_alerts.' '._ALERT;
+    
+    $save_criteria .= '&nbsp;&nbsp;</TD></TR></TABLE>';
+    echo $save_criteria;
+    return;
+  }
+
+     $tmp_len = strlen($save_criteria);
+
+     $save_criteria .= $cs->criteria['sensor']->Description();
+     $save_criteria .= $cs->criteria['sig']->Description();
+     $save_criteria .= $cs->criteria['sig_class']->Description();
+     $save_criteria .= $cs->criteria['sig_priority']->Description();
+     $save_criteria .= $cs->criteria['ag']->Description();
+
+     $save_criteria .= $cs->criteria['time']->Description();
+
+    if ( $tmp_len == strlen($save_criteria) ) 
+       $save_criteria .= '<I> &nbsp&nbsp any </I>';
+
+  $save_criteria .= '&nbsp;&nbsp;</TD></TR>';
+
+  $save_criteria .= '<TR>
+        <TD CLASS="iptitle">'._QCIPCRIT.'</TD>
+        <TD>';
+
+  if ( !$cs->criteria['ip_addr']->isEmpty() || !$cs->criteria['ip_field']->isEmpty() )
+  {
+     $save_criteria .= $cs->criteria['ip_addr']->Description();
+     $save_criteria .= $cs->criteria['ip_field']->Description();
+  }
+  else
+     $save_criteria .= '<I> &nbsp;&nbsp; any </I>';    
+
+  $save_criteria .= '&nbsp;&nbsp;</TD></TR>';
+
+  $save_criteria .= '<TR><TD CLASS="layer4title">';
+  $save_criteria .= $cs->criteria['layer4']->Description();
+  $save_criteria .= '</TD><TD>';
+
+  if ( $cs->criteria['layer4']->Get() == "TCP" )
+  {
+     if ( !$cs->criteria['tcp_port']->isEmpty() || !$cs->criteria['tcp_flags']->isEmpty() || !$cs->criteria['tcp_field']->isEmpty() )
+     {
+        $save_criteria .= $cs->criteria['tcp_port']->Description();       
+        $save_criteria .= $cs->criteria['tcp_flags']->Description();
+        $save_criteria .= $cs->criteria['tcp_field']->Description();
+     }
+     else
+        $save_criteria .= '<I> &nbsp;&nbsp; any </I>';
+
+     $save_criteria .= '&nbsp;&nbsp;</TD></TR>';
+  }
+
+  else if ( $cs->criteria['layer4']->Get() == "UDP" )
+  {
+     if ( !$cs->criteria['udp_port']->isEmpty() || !$cs->criteria['udp_field']->isEmpty() )
+     {
+        $save_criteria .= $cs->criteria['udp_port']->Description();
+        $save_criteria .= $cs->criteria['udp_field']->Description();
+     }
+     else
+        $save_criteria .= '<I> &nbsp;&nbsp; any </I>';
+
+     $save_criteria .= '&nbsp;&nbsp;</TD></TR>';
+  }
+
+  else if ( $cs->criteria['layer4']->Get() == "ICMP" )
+  {
+     if ( !$cs->criteria['icmp_field']->isEmpty() )
+     {
+        $save_criteria .= $cs->criteria['icmp_field']->Description();
+     }
+     else if ( $cs->criteria['layer4']->Get() == "RawIP" )
+   {
+      if ( !$cs->criteria['rawip_field']->isEmpty() )
+      {
+         $save_criteria .= $cs->criteria['rawip_field']->Description();
+      }
+      else
+         $save_criteria .= '<I> &nbsp&nbsp any </I>';
+   
+      $save_criteria .= '&nbsp;&nbsp;</TD></TR>';
+   }
+     else
+        $save_criteria .= '<I> &nbsp;&nbsp; any </I>';
+
+     $save_criteria .= '&nbsp;&nbsp;</TD></TR>';
+  }
+  else
+  {
+     $save_criteria .= '<I> &nbsp;&nbsp; none </I></TD></TR>';
+  }
+
+  /* Payload ************** */
+  $save_criteria .= '<TR>
+        <TD CLASS="payloadtitle">'._QCPAYCRIT.'</TD>
+        <TD>';
+
+  if ( !$cs->criteria['data']->isEmpty() )       
+     $save_criteria .= $cs->criteria['data']->Description();
+  else
+     $save_criteria .= '<I> &nbsp;&nbsp; any </I>';
+
+  $save_criteria .= '&nbsp;&nbsp;</TD></TR>';
+
+  
+  $save_criteria .= '</TABLE>'; 
+
+  $save_criteria = '&nbsp;<B>'._QUERIED.'</B><FONT> : '.date("D F d, Y H:i:s",time()).'</FONT>'.
+                   '<TABLE BORDER=0 CELLSPACING=0 CELLPADDING=2 BGCOLOR="#000000">'.
+                   '<TR><TD>'.
+         
+                   '<TABLE BORDER=0 CELLSPACING=0 CELLPADDING=1 BGCOLOR="#DDDDDD"><TR><TD>'.
+
+                   $save_criteria.
+
+                   '</TD></TR></TABLE>'.
+
+                   '</TD></TR>'.
+                   '</TABLE>';
+
+  echo $save_criteria;
+}
+
+/********************************************************************************************/
+function ProcessCriteria()
+{
+  GLOBAL $db, $join_sql, $where_sql, $criteria_sql, $sql, $debug_mode,
+         $caller, $DBtype;
+
+  /* the JOIN criteria */
+  $ip_join_sql  = " LEFT JOIN iphdr ON acid_event.sid=iphdr.sid AND acid_event.cid=iphdr.cid ";
+  $tcp_join_sql = " LEFT JOIN tcphdr ON acid_event.sid=tcphdr.sid AND acid_event.cid=tcphdr.cid ";
+  $udp_join_sql = " LEFT JOIN udphdr ON acid_event.sid=udphdr.sid AND acid_event.cid=udphdr.cid ";
+  $icmp_join_sql= " LEFT JOIN icmphdr ON acid_event.sid=icmphdr.sid AND acid_event.cid=icmphdr.cid ";
+  $rawip_join_sql= " LEFT JOIN iphdr ON acid_event.sid=iphdr.sid AND acid_event.cid=iphdr.cid ";
+  $data_join_sql= " LEFT JOIN data ON acid_event.sid=data.sid AND acid_event.cid=data.cid ";
+  $ag_join_sql  = " LEFT JOIN acid_ag_alert ON acid_event.sid=acid_ag_alert.ag_sid AND acid_event.cid=acid_ag_alert.ag_cid "; 
+
+  $sig_join_sql = "";
+
+  $sql = "SELECT acid_event.sid, acid_event.cid, signature, timestamp, ".
+         "acid_event.ip_src, acid_event.ip_dst, acid_event.ip_proto FROM acid_event";
+ 
+  // This needs to be examined!!! -- Kevin
+  $where_sql = " WHERE ";
+  //$where_sql = "";
+  // $criteria_sql = " acid_event.sid > 0";
+  $criteria_sql = " 1 = 1 ";
+  $join_sql = "";
+
+  /* ********************** Meta Criteria ******************************************** */
+
+  /* XXX-SEC */
+  GLOBAL $cs;
+
+  $sig = $cs->criteria['sig']->criteria;
+  $sig_type = $cs->criteria['sig']->sig_type;
+  $sig_class = $cs->criteria['sig_class']->criteria;
+  $sig_priority = $cs->criteria['sig_priority']->criteria;
+  $ag = $cs->criteria['ag']->criteria;
+  $sensor = $cs->criteria['sensor']->criteria;
+  $time = $cs->criteria['time']->criteria;
+  $time_cnt = $cs->criteria['time']->GetFormItemCnt();
+  $ip_addr = $cs->criteria['ip_addr']->criteria;
+  $ip_addr_cnt = $cs->criteria['ip_addr']->GetFormItemCnt();
+  $layer4 = $cs->criteria['layer4']->criteria;
+  $ip_field = $cs->criteria['ip_field']->criteria;
+  $ip_field_cnt = $cs->criteria['ip_field']->GetFormItemCnt();
+  $tcp_port = $cs->criteria['tcp_port']->criteria;
+  $tcp_port_cnt = $cs->criteria['tcp_port']->GetFormItemCnt();
+  $tcp_flags = $cs->criteria['tcp_flags']->criteria;
+  $tcp_field = $cs->criteria['tcp_field']->criteria;
+  $tcp_field_cnt = $cs->criteria['tcp_field']->GetFormItemCnt();
+  $udp_port = $cs->criteria['udp_port']->criteria;
+  $udp_port_cnt = $cs->criteria['udp_port']->GetFormItemCnt();
+  $udp_field = $cs->criteria['udp_field']->criteria;
+  $udp_field_cnt = $cs->criteria['udp_field']->GetFormItemCnt();
+  $icmp_field = $cs->criteria['icmp_field']->criteria;
+  $icmp_field_cnt= $cs->criteria['icmp_field']->GetFormItemCnt();
+  $rawip_field = $cs->criteria['rawip_field']->criteria;
+  $rawip_field_cnt= $cs->criteria['rawip_field']->GetFormItemCnt();
+  $data = $cs->criteria['data']->criteria;
+  $data_cnt = $cs->criteria['data']->GetFormItemCnt();
+  $data_encode = $cs->criteria['data']->data_encode;
+
+  $tmp_meta = "";
+  /* Sensor */
+  if ( $sensor != "" && $sensor != " " )
+     $tmp_meta = $tmp_meta." AND acid_event.sid='".$sensor."'";
+  else
+     $cs->criteria['sensor']->Set("");
+
+  /* Alert Group */
+  if ( $ag != "" && $ag != " " )
+  {
+     $tmp_meta = $tmp_meta." AND ag_id =".$ag;
+     $join_sql = $join_sql.$ag_join_sql;
+  }
+  else
+     $cs->criteria['ag']->Set("");
+
+  /* Signature */
+  if ( (isset($sig[0]) && $sig[0] != " " && $sig[0] != "") && (isset($sig[1]) && $sig[1] != "") )
+  {
+     $sig_neg = "";
+     if ( $sig[2] == "!=" )
+        $sig_neg = " NOT ";
+
+     if ( $db->baseGetDBversion() >= 100 )
+     {
+        /* If given a sig ID instead of a name */
+        if ( ($sig_type == 1) && ($sig[0] == "=") )
+        {
+           $tmp_meta = $tmp_meta." AND (signature='".$sig[1]."') ";
+        }
+        else
+        {
+           if ( $sig[0] == "=" )
+              if ($db->DB_type != "mssql")
+                $tmp_meta = $tmp_meta." AND ".$sig_neg." (sig_name='".$sig[1]."') ";
+              else 
+                $tmp_meta = $tmp_meta." AND ".$sig_neg." (sig_name LIKE '".MssqlKludgeValue($sig[1])."') ";
+           else if ($sig[0] == "LIKE" )
+              $tmp_meta = $tmp_meta." AND ".$sig_neg." (sig_name LIKE '%".$sig[1]."%') ";
+        }
+     }
+     else
+     {
+       if ( $sig[0] == "=" )
+         $tmp_meta = $tmp_meta." AND ".$sig_neg." (signature='".$sig[1]."') ";
+       else if ($sig[0] == "LIKE" )
+         $tmp_meta = $tmp_meta." AND ".$sig_neg." (signature LIKE '%".$sig[1]."%') ";
+     }
+  }
+  else
+     $cs->criteria['sig']->Set("");
+
+  /* Signature Classification */
+  if ( $sig_class != " " && $sig_class != "" && $sig_class != "0")
+  {
+     $tmp_meta = $tmp_meta." AND sig_class_id = '".$sig_class."'";
+  }
+  else if ($sig_class == "0")
+  {
+     $tmp_meta = $tmp_meta." AND (sig_class_id is null OR sig_class_id = '0')";
+  }
+  else
+     $cs->criteria['sig_class']->Set("");
+
+  /* Signature Priority */
+  if ( $sig_priority[1] != " " && $sig_priority[1] != "" && $sig_priority[1] != "0")
+  {
+     $tmp_meta = $tmp_meta." AND sig_priority ".$sig_priority[0]." '".$sig_priority[1]."'";
+  }
+  else if ($sig_priority[1] == "0")
+  {
+     $tmp_meta = $tmp_meta." AND (sig_priority is null OR sig_priority = '0')";
+  }
+  else
+     $cs->criteria['sig_priority']->Set("");
+
+  /* Date/Time */
+  if ( DateTimeRows2sql($time, $time_cnt, $tmp_meta) == 0 )
+     $cs->criteria['time']->SetFormItemCnt(0);
+
+  $criteria_sql = $criteria_sql.$tmp_meta;
+
+  /* ********************** IP Criteria ********************************************** */ 
+
+  /* IP Addresses */
+  $tmp2 = "";
+
+  for ( $i = 0; $i < $ip_addr_cnt; $i++ )
+  {
+     $tmp = "";
+     if ( isset($ip_addr[$i][3]) && $ip_addr[$i][1] != " ")
+     {
+        if ( ($ip_addr[$i][3] != "") && ($ip_addr[$i][4] != "") &&
+             ($ip_addr[$i][5] != "") && ($ip_addr[$i][6] != "" ) )
+        {
+           /* if use illegal 256.256.256.256 address then
+            *  this is the special case where need to search for portscans
+            */
+           if ( ($ip_addr[$i][3] == "256") && ($ip_addr[$i][4] == "256") &&
+                ($ip_addr[$i][5] == "256") && ($ip_addr[$i][6] == "256" ) )
+           {
+             $tmp = $tmp." acid_event.".$ip_addr[$i][1]." IS NULL"." ";
+           }
+           else
+           {
+             if ( $ip_addr[$i][10] == "" )
+             {
+             $tmp = $tmp." acid_event.".$ip_addr[$i][1].$ip_addr[$i][2]."'".
+                    baseIP2long($ip_addr[$i][3].".". 
+                                $ip_addr[$i][4].".".
+                                $ip_addr[$i][5].".".
+                                $ip_addr[$i][6])."' ";
+             }
+             else
+             {
+                $mask = getIPMask($ip_addr[$i][3].".". 
+                                  $ip_addr[$i][4].".".
+                                  $ip_addr[$i][5].".".
+                                  $ip_addr[$i][6], $ip_addr[$i][10]);
+                if ( $ip_addr[$i][2] == "!=" )
+                   $tmp_op = " NOT ";
+                else 
+                   $tmp_op = "";
+
+                $tmp = $tmp.$tmp_op." (acid_event.".$ip_addr[$i][1].">= '".
+                               baseIP2long($mask[0])."' AND ".
+                               "acid_event.".$ip_addr[$i][1]."<= '".
+                               baseIP2long($mask[1])."')"; 
+             }       
+           }
+        }
+        /* if have chosen the address type to be both source and destination */
+        if ( ereg("ip_both", $tmp) )
+        {
+           $tmp_src = ereg_replace("ip_both","ip_src",$tmp);
+           $tmp_dst = ereg_replace("ip_both","ip_dst",$tmp);
+           
+           if ( $ip_addr[$i][2] == '=' )
+             $tmp = "(".$tmp_src.') OR ('.$tmp_dst.')';
+           else
+             $tmp = "(".$tmp_src.') AND ('.$tmp_dst.')';
+        }
+    
+        if ( $tmp != "" )       
+           $tmp = $ip_addr[$i][0]."(".$tmp.")".$ip_addr[$i][8].$ip_addr[$i][9];
+     }
+     else if ( (isset($ip_addr[$i][3]) && $ip_addr[$i][3] != "" ) || $ip_addr[$i][1] != " " )
+     {
+        /* IP_addr_type, but MALFORMED IP address */
+        if ( $ip_addr[$i][1] != " " && $ip_addr[$i][3] == "" && 
+             ($ip_addr[$i][4] != "" || $ip_addr[$i][5] != "" || $ip_addr[$i][6] != "" ) )
+            ErrorMessage("<B>"._QCERRCRITWARN."</B> "._QCERRINVIPCRIT." ' *.".
+                         $ip_addr[$i][4].".".$ip_addr[$i][5].".".$ip_addr[$i][6]." '");
+
+        /* ADDRESS, but NO IP_addr_type was given */
+        if ( isset($ip_addr[$i][3]) && $ip_addr[$i][1] == " ")
+           ErrorMessage("<B>"._QCERRCRITWARN."</B> "._QCERRIP." '".
+                        $ip_addr[$i][3].".".$ip_addr[$i][4].".".
+                        $ip_addr[$i][5].".".$ip_addr[$i][6]."' "._QCERRCRITADDRESSTYPE);
+
+        /* IP_addr_type IS FILLED, but no ADDRESS */
+        if ( ($ip_addr[$i][1] != " " && $ip_addr[$i][1] != "") && $ip_addr[$i][3] == "" )
+           ErrorMessage("<B>"._QCERRCRITWARN."</B> "._QCERRIPTYPE." '".
+                        $ip_addr[$i][1]."' "._QCERRCRITIPADDRESSNONE1.$i.") "._QCERRCRITIPADDRESSNONE);
+     }
+     $tmp2 = $tmp2.$tmp;
+
+     if ( ($i > 0 && $ip_addr[$i-1][9] == ' ' && $ip_addr[$i-1][3] != "") )
+        ErrorMessage("<B>"._QCERRCRITWARN."</B> "._QCERRCRITIPIPBOOL." #$i and #".($i+1).".");
+  }
+
+  if ( $tmp2 != "" )
+     $criteria_sql = $criteria_sql." AND ( ".$tmp2." )";  
+  else
+     $cs->criteria['ip_addr']->SetFormItemCnt(0);
+
+  /* IP Fields */
+  if ( FieldRows2sql($ip_field, $ip_field_cnt, $criteria_sql) == 0 )
+     $cs->criteria['ip_field']->SetFormItemCnt(0);
+
+  /* Layer-4 encapsulation */
+  if ( $layer4 == "TCP" )
+     $criteria_sql = $criteria_sql." AND acid_event.ip_proto= '6'";  
+  else if ( $layer4 == "UDP" )
+     $criteria_sql = $criteria_sql." AND acid_event.ip_proto= '17'";
+  else if ( $layer4 == "ICMP" )
+     $criteria_sql = $criteria_sql." AND acid_event.ip_proto= '1'";
+  else if ( $layer4 == "RawIP" )
+     $criteria_sql = $criteria_sql." AND acid_event.ip_proto= '255'";
+  else
+     $cs->criteria['layer4']->Set("");
+
+  /* Join the iphdr table if necessary */
+  if ( !$cs->criteria['ip_field']->isEmpty() )
+     $join_sql = $ip_join_sql.$join_sql;
+
+  /* ********************** TCP Criteria ********************************************** */
+if ( $layer4 == "TCP" )
+{
+  $proto_tmp = "";
+  /* TCP Ports */
+  if ( FieldRows2sql($tcp_port, $tcp_port_cnt, $proto_tmp) == 0 )
+     $cs->criteria['tcp_port']->SetFormItemCnt(0);
+ 
+  $criteria_sql = $criteria_sql.$proto_tmp;
+  
+  $proto_tmp = "";
+  /* TCP Flags */
+  if ( isset($tcp_flags) )
+  {
+    if ( $tcp_flags[0] == "contains" || $tcp_flags[0] == "is" )
+    {
+      $flag_tmp = $tcp_flags[1]+$tcp_flags[2]+$tcp_flags[3]+$tcp_flags[4]+
+                  $tcp_flags[5]+$tcp_flags[6]+$tcp_flags[7]+$tcp_flags[8];
+      if ( $tcp_flags[0] == "is" )
+        $proto_tmp = $proto_tmp.' AND tcp_flags='.$flag_tmp;
+      else if ( $tcp_flags[0] == "contains" )
+        $proto_tmp = $proto_tmp.' AND (tcp_flags & '.$flag_tmp.' = '.$flag_tmp." )";
+      else 
+        $proto_tmp = "";
+    }
+  }
+
+  /* TCP Fields */
+  if ( FieldRows2sql($tcp_field, $tcp_field_cnt, $proto_tmp) == 0 )
+     $cs->criteria['tcp_field']->SetFormItemCnt(0);
+
+  /* TCP Options 
+   *  - not implemented
+   */
+
+  if ( !$cs->criteria['tcp_port']->isEmpty() || !$cs->criteria['tcp_flags']->isEmpty() || !$cs->criteria['tcp_field']->isEmpty() )
+  {
+     $criteria_sql = $criteria_sql.$proto_tmp;
+     if ( !$cs->criteria['tcp_flags']->isEmpty() || !$cs->criteria['tcp_field']->isEmpty() )
+        $join_sql = $tcp_join_sql.$join_sql;
+  }
+}
+
+  /* ********************** UDP Criteria ********************************************* */
+if ( $layer4 == "UDP" )
+{
+  $proto_tmp = "";
+
+  /* UDP Ports */
+  if ( FieldRows2sql($udp_port, $udp_port_cnt, $proto_tmp) == 0 )
+     $cs->criteria['udp_port']->SetFormItemCnt(0);
+
+  $criteria_sql = $criteria_sql.$proto_tmp;
+  $proto_tmp = "";
+
+  /* UDP Fields */
+  if ( FieldRows2sql($udp_field, $udp_field_cnt, $proto_tmp) == 0 )
+     $cs->criteria['udp_field']->SetFormItemCnt(0);
+
+  if ( !$cs->criteria['udp_port']->isEmpty() || !$cs->criteria['udp_field']->isEmpty() )
+  {
+     $criteria_sql = $criteria_sql.$proto_tmp;
+     if ( !$cs->criteria['udp_field']->isEmpty() )
+        $join_sql = $udp_join_sql.$join_sql;
+  }
+}
+
+  /* ********************** ICMP Criteria ******************************************** */
+if ( $layer4 == "ICMP" )
+{
+  $proto_tmp = "";
+
+  /* ICMP Fields */
+  if ( FieldRows2sql($icmp_field, $icmp_field_cnt, $proto_tmp) == 0 )
+     $cs->criteria['icmp_field']->SetFormItemCnt(0);
+
+  if ( !$cs->criteria['icmp_field']->isEmpty() )
+  {
+     $criteria_sql = $criteria_sql.$proto_tmp;
+     $join_sql = $icmp_join_sql.$join_sql;
+  }
+}
+
+   /* ********************** Packet Scan Criteria ************************************* */
+if ( $layer4 == "RawIP" )
+{
+  $proto_tmp = "";
+
+  /* RawIP Fields */
+  if ( FieldRows2sql($rawip_field, $rawip_field_cnt, $proto_tmp) == 0 )
+     $cs->criteria['rawip_field']->SetFormItemCnt(0);
+
+  if ( !$cs->criteria['rawip_field']->isEmpty() )
+  {
+     $criteria_sql = $criteria_sql.$proto_tmp;
+     $join_sql = $rawip_join_sql.$join_sql;
+  }
+}
+
+  /* ********************** Payload Criteria ***************************************** */  
+
+  $tmp_payload = "";
+  if ( DataRows2sql($data, $data_cnt, $data_encode, $tmp_payload) == 0 )
+     $cs->criteria['data']->SetFormItemCnt(0);
+
+  if ( !$cs->criteria['data']->isEmpty() )
+  {
+     $criteria_sql = $criteria_sql.$tmp_payload;
+     $join_sql = $data_join_sql.$join_sql;
+  }
+ 
+  $csql[0] = $join_sql;
+  $csql[1] = $criteria_sql;
+
+  return $csql;
+}
+
+?>
diff -urNb base-1.1.2/base_qry_form.php base-1.1.2-ossim/base_qry_form.php
--- base-1.1.2/base_qry_form.php	Sat Apr  9 01:38:34 2005
+++ base-1.1.2-ossim/base_qry_form.php	Mon Apr 11 17:29:47 2005
@@ -81,6 +81,20 @@
       <TD><B>Alert Time:</B></TD>
       <TD>';
       $cs->criteria['time']->PrintForm();    
+
+echo '<TR>
+      <TD><B>Priority:</B></TD>
+      <TD>';
+      echo '<B>Risk: </B>';
+      $cs->criteria['ossim_risk_a']->PrintForm();
+      echo '<B>Priority: </B>';
+      $cs->criteria['ossim_priority']->PrintForm();
+      echo '<B>Type: </B>';
+      $cs->criteria['ossim_type']->PrintForm();
+      echo '<BR><B>Asset: </B>';
+      $cs->criteria['ossim_asset_dst']->PrintForm();
+      echo '<B>Reliability: </B>';
+      $cs->criteria['ossim_reliability']->PrintForm();
       
         echo '
 </TABLE>
diff -urNb base-1.1.2/base_qry_sqlcalls.php base-1.1.2-ossim/base_qry_sqlcalls.php
--- base-1.1.2/base_qry_sqlcalls.php	Sat Apr  9 01:38:34 2005
+++ base-1.1.2-ossim/base_qry_sqlcalls.php	Mon Apr 11 17:29:47 2005
@@ -70,6 +70,18 @@
   $qro->AddTitle(_NBDESTADDR, 
                  "dip_a", " ", " ORDER BY ip_dst ASC",
                  "dip_d", " ", " ORDER BY ip_dst DESC");
+  $qro->AddTitle("Asst",
+                 "oasset_d_a", " ", " ORDER BY ossim_asset_dst ASC",
+                 "oasset_d_d", " ", " ORDER BY ossim_asset_dst DESC");
+  $qro->AddTitle("Prio",
+                 "oprio_a", " ", " ORDER BY ossim_priority ASC",
+                 "oprio_d", " ", " ORDER BY ossim_priority DESC");
+  $qro->AddTitle("Risk",
+                 "oriska_a", " ", " ORDER BY ossim_risk_a ASC",
+                 "oriska_d", " ", " ORDER BY ossim_risk_a DESC");
+  $qro->AddTitle("Rel",
+                 "oreli_a", " ", " ORDER BY ossim_reliability ASC",
+                 "oreli_d", " ", " ORDER BY ossim_reliability DESC");
   $qro->AddTitle(_NBLAYER4, 
                  "proto_a", " ", " ORDER BY ip_proto ASC",
                  "proto_d", " ", " ORDER BY ip_proto DESC");
@@ -167,6 +179,14 @@
       $current_sig_txt = BuildSigByID($myrow[2], $db, 2);
       $current_sport = $current_dport = "";
 
+      $current_otype = $myrow[7];
+      $current_oprio = $myrow[8];
+      $current_oreli = $myrow[9];
+      $current_oasset_s = $myrow[10];
+      $current_oasset_d = $myrow[11];
+      $current_oriskc = $myrow[12];
+      $current_oriska = $myrow[13];
+
       qroPrintEntryHeader($i);
 
       $tmp_rowid = "#".(($qs->GetCurrentView() * $show_rows)+$i).
@@ -239,6 +259,57 @@
                        '</A><FONT SIZE="-1">'.$current_dport.'</FONT>');
        else
          qroPrintEntry('<A HREF="'.$BASE_urlpath.'/base_app_faq.php#1">'._UNKNOWN.'</A>');    
+
+      if ($current_dip != "255.255.255.255") {
+        if ($current_oasset_d != "")
+           qroPrintEntry($current_oasset_d);
+        else
+           qroPrintEntry("--");
+    $current_orisk = $current_oriska;
+      } else {      
+        if ($current_oasset_s != "")
+           qroPrintEntry($current_oasset_s);
+        else
+           qroPrintEntry("--");
+    $current_orisk = $current_oriskc;
+      }
+
+      if ($current_oprio != "")
+         qroPrintEntry($current_oprio);
+      else
+         qroPrintEntry("--");
+      if ($current_otype == 2) {
+         if ($current_orisk == "")
+            qroPrintEntry("--");
+         else if ($current_orisk == 0)
+            qroPrintEntry('<B>'.$current_orisk.'</B>');
+         else if ($current_orisk >= 1 && $current_orisk <= 4)
+            qroPrintEntry('<FONT color="green"><B>'.$current_orisk.'</B></FONT>');
+         else if ($current_orisk >= 5 && $current_orisk <= 7)
+            qroPrintEntry('<FONT color="orange"><B>'.$current_orisk.'</B></FONT>');
+         else if ($current_orisk >= 8 && $current_orisk <= 10)
+            qroPrintEntry('<FONT color="red"><B>'.$current_orisk.'</B></FONT>');
+         else
+            qroPrintEntry("--");
+      } else {
+         if ($current_orisk == "")
+            qroPrintEntry("--");
+         else if ($current_orisk == 0)
+            qroPrintEntry($current_orisk);
+         else if ($current_orisk >= 1 && $current_orisk <= 4)
+            qroPrintEntry('<FONT color="green">'.$current_orisk.'</FONT>');
+         else if ($current_orisk >= 5 && $current_orisk <= 7)
+            qroPrintEntry('<FONT color="orange">'.$current_orisk.'</FONT>');
+         else if ($current_orisk >= 8 && $current_orisk <= 10)
+            qroPrintEntry('<FONT color="red">'.$current_orisk.'</FONT>');
+         else
+            qroPrintEntry("--");
+      }
+
+      if ($current_oreli != "")
+         qroPrintEntry($current_oreli);
+      else
+         qroPrintEntry("--");
 
       qroPrintEntry('<FONT>'.IPProto2str($current_proto).'</FONT>');
 
diff -urNb base-1.1.2/base_stat_ipaddr.php base-1.1.2-ossim/base_stat_ipaddr.php
--- base-1.1.2/base_stat_ipaddr.php	Sat Apr  9 01:38:34 2005
+++ base-1.1.2-ossim/base_stat_ipaddr.php	Mon Apr 11 17:29:47 2005
@@ -27,6 +27,9 @@
   $start = time();
 
   include("base_conf.php");
+  require_once ('ossim_conf.inc');
+  require_once ('ossim_db.inc');
+  require_once('classes/Sensor.inc');
   include("$BASE_path/includes/base_constants.inc.php");
   include("$BASE_path/includes/base_include.inc.php");
   include_once("$BASE_path/base_db_common.php");
@@ -253,7 +256,17 @@
            </TABLE>';
 
   /* Print the Statistics the IP address */
-  echo '<CENTER><B>'.$ip.'</B><BR>FQDN: <B>';
+
+  $db_object = new ossim_db();
+  $conn_object = $db_object->connect();
+  echo '<CENTER><B>'.$ip.'</B> ( '
+  ?> 
+  <a href="<?php echo Sensor::get_sensor_link($conn_object, $ip) .  "/$ip.html" ?>">See host Detail</a>
+  <?php
+  $db_object->close($conn_object);
+  echo ') <BR>FQDN: <B>';
+
+  
   
   if ( $resolve_IP == 0 )
      echo '  ('._PSNODNS.')';
diff -urNb base-1.1.2/base_update_db.php base-1.1.2-ossim/base_update_db.php
--- base-1.1.2/base_update_db.php	Thu Jan  1 01:00:00 1970
+++ base-1.1.2-ossim/base_update_db.php	Mon Apr 11 17:29:47 2005
@@ -0,0 +1,70 @@
+<?php
+/*
+** Copyright (C) 2000 Carnegie Mellon University
+**
+** Author: Roman Danyliw <rdd@cert.org>, <roman@danyliw.com>
+**
+** This program is free software; you can redistribute it and/or modify
+** it under the terms of the GNU General Public License as published by
+** the Free Software Foundation; either version 2 of the License, or
+** (at your option) any later version.
+**
+** This program is distributed in the hope that it will be useful,
+** but WITHOUT ANY WARRANTY; without even the implied warranty of
+** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+** GNU General Public License for more details.
+**
+** You should have received a copy of the GNU General Public License
+** along with this program; if not, write to the Free Software
+** Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+*/
+
+/*  
+ * Analysis Console for Incident Databases (ACID) by Roman Danyliw
+ *
+ * This application was developed at the CERT Coordination Center as a part 
+ * of the AIRCERT project.
+ *
+ * See http://www.cert.org/kb/acid for the most up to date 
+ * information and documentation about this application.
+ *
+ * Purpose:
+ *
+ *   ACID is an PHP-based analysis engine to search and process 
+ *   a database of security incidents generated by the NIDS Snort.
+ *
+ * Configuration:
+ *
+ *   See the 'README' file, and 'acid.conf'
+ *
+ */
+?>
+<?php
+  include("base_conf.php");
+  include("includes/base_include.inc");
+  include_once("base_common.php");
+  include_once("base_stat_common.php");
+  include_once("base_db_common.php");
+
+  /* Check that PHP was built correctly */
+  $tmp_str = verify_php_build($DBtype);
+  if ( $tmp_str != "")
+  {
+     echo $tmp_str;
+     die();
+  }
+
+  /* Connect to the Alert database */
+  $db = NewBASEDBConnection($DBlib_path, $DBtype);
+  $db->baseDBConnect($db_connect_method, $alert_dbname, $alert_host, $alert_port, $alert_user, $alert_password);
+
+  /* Check that the DB schema is recent */
+  $tmp_str = verify_db($db, $alert_dbname, $alert_host);
+  if ( $tmp_str != "")
+  {
+     echo $tmp_str;
+     die();
+  }
+
+  UpdateAlertCache($db);
+?>
diff -urNb base-1.1.2/includes/base_cache.inc.php base-1.1.2-ossim/includes/base_cache.inc.php
--- base-1.1.2/includes/base_cache.inc.php	Sat Apr  9 01:38:34 2005
+++ base-1.1.2-ossim/includes/base_cache.inc.php	Mon Apr 11 17:29:47 2005
@@ -220,6 +220,11 @@
   if ( $db->baseGetDBversion() < 100 )
      $schema_specific[1] = $schema_specific[1].", signature";
 
+  /* OSSIM */
+  $schema_specific[0] = $schema_specific[0].", ossim_type, ossim_priority, ossim_reliability, ossim_asset_src, ossim_asset_dst, ossim_risk_c, ossim_risk_a";
+  $schema_specific[1] = $schema_specific[1].", ossim_event.type, ossim_event.priority, ossim_event.reliability, ossim_event.asset_src, ossim_event.asset_dst, ossim_event.risk_c, ossim_event.risk_a ";
+  $schema_specific[2] = $schema_specific[2]." LEFT JOIN ossim_event ON (event.sid=ossim_event.sid AND event.cid=ossim_event.cid)";
+
   $update_sql = array(4);
 
   /* IP events only */
diff -urNb base-1.1.2/includes/base_output_query.inc.php base-1.1.2-ossim/includes/base_output_query.inc.php
--- base-1.1.2/includes/base_output_query.inc.php	Sat Apr  9 01:38:34 2005
+++ base-1.1.2-ossim/includes/base_output_query.inc.php	Mon Apr 11 17:29:47 2005
@@ -100,7 +100,7 @@
        if ( count($sort_keys) == 2 )
        {
           $print_title = "<A HREF=\"".$this->url."&sort_order=".$sort_keys[0]."\">&lt;</A>".
-                         "&nbsp;".$title["key"]."&nbsp;".
+                         $title["key"].
                          "<A HREF=\"".$this->url."&sort_order=".$sort_keys[1]."\">&gt;</A>";
        }
        else
@@ -108,7 +108,7 @@
           $print_title = $title["key"];
        }
     
-       echo '    <TD CLASS="plfieldhdr">&nbsp;'.$print_title.'&nbsp;</TD>'."\n";
+       echo '    <TD CLASS="plfieldhdr">'.$print_title.'</TD>'."\n";
      }
 
     echo "   </TR>\n";
diff -urNb base-1.1.2/includes/base_state_citems.inc.php base-1.1.2-ossim/includes/base_state_citems.inc.php
--- base-1.1.2/includes/base_state_citems.inc.php	Sat Apr  9 01:38:34 2005
+++ base-1.1.2-ossim/includes/base_state_citems.inc.php	Mon Apr 11 17:29:47 2005
@@ -856,21 +856,96 @@
    function Import()
    {
       parent::Import();      
+      require ('base_conf.php');
 
+      $vals = NULL;
+      $empty = 1;
       /* expand IP into octets */
       for ( $i = 0; $i < $this->criteria_cnt; $i++ )
       {
         if ( (isset ($this->criteria[$i][3])) &&
              (ereg("([0-9]*)\.([0-9]*)\.([0-9]*)\.([0-9]*)", $this->criteria[$i][3])) )
         {
+                if (($use_ossim_session) && (Session::allowedNets())) {
+                    require_once('classes/Net.inc');
+                $domain = Session::allowedNets();
+                if ($domain != "") {
+                    $tmp_myip = $this->criteria[$i][3];
+                    $myip = strtok($tmp_myip, "/");
+                    if (Net::isIpInNet($myip, $domain)) {
            $tmp_ip_str = $this->criteria[$i][7] = $this->criteria[$i][3];
+                     $this->criteria[$i][2] = "=";
            $this->criteria[$i][3] = strtok($tmp_ip_str, ".");
            $this->criteria[$i][4] = strtok(".");
            $this->criteria[$i][5] = strtok(".");
            $this->criteria[$i][6] = strtok("/");
            $this->criteria[$i][10] = strtok("");
+                       $empty = 0; 
+                        $vals[] = $this->criteria[$i];
         }
       } 
+            } else {
+                $tmp_ip_str = $this->criteria[$i][7] = $this->criteria[$i][3];
+                $this->criteria[$i][3] = strtok($tmp_ip_str, ".");
+                $this->criteria[$i][4] = strtok(".");
+                $this->criteria[$i][5] = strtok(".");
+                $this->criteria[$i][6] = strtok("/");
+                $this->criteria[$i][10] = strtok("");
+                $empty = 0;
+                $vals[] = $this->criteria[$i];
+            }
+
+        } elseif (ereg("([0-9]*)\.([0-9]*)\.([0-9]*)\.([0-9]*)", $this->criteria[$i][7])) {
+            $empty = 0;
+                $vals[] = $this->criteria[$i];
+        }
+      } 
+       $this->criteria = $vals;
+        $this->criteria_cnt = count($vals);
+
+      if (($use_ossim_session) && ($empty)) {
+            $domain = Session::allowedNets();
+            if ($domain != "") {
+                $nets = explode(",", $domain);
+                $this->criteria = Array();
+                for ($i = 0; $i < count($nets); $i++) {
+                    $tmp_ip_str = $tmp[7] = $nets[$i];
+                    $tmp[0] = " ";
+                    $tmp[1] = "ip_both";
+                    $tmp[2] = "=";
+
+                $tmp[3] = strtok($tmp_ip_str, ".");
+                $tmp[4] = strtok(".");
+                $tmp[5] = strtok(".");
+                $tmp[6] = strtok("/");
+                $tmp[10] = strtok("");
+
+                    $tmp[8] = " ";
+                    if ($i == (count($nets) - 1))
+                        $tmp[9] = " ";
+                    else
+                        $tmp[9] = "OR";
+                    $this->criteria[$this->criteria_cnt] = $tmp;
+                    $this->criteria_cnt++;
+                }
+            }
+        }
+
+
+        $new = ImportHTTPVar("new", VAR_DIGIT);
+        $submit = ImportHTTPVar("submit");
+
+        if ( ($new == 1) && ($submit == "") ) {
+            $this->criteria = NULL;
+            $this->criteria_cnt = 1;
+        }
+
+        if ($this->criteria_cnt == "") {
+            $this->criteria_cnt = 1;
+        }
+
+        //print_r ($this->criteria);
+
 
       $_SESSION['ip_addr'] = &$this->criteria;
       $_SESSION['ip_addr_cnt'] = &$this->criteria_cnt;
@@ -1530,4 +1605,457 @@
    }
 };
 
+class OssimPriorityCriteria extends SingleElementCriteria
+{
+   function Init()
+   {
+     $this->criteria = "";
+   }
+
+   function Clear()
+   {
+    /* clears the criteria */
+   }
+
+   function SanitizeElement()
+   {
+      $this->criteria[0] = CleanVariable($this->criteria[0], "", array("=", "!=", "<", "<=", ">", ">="));
+      $this->criteria[1] = CleanVariable($this->criteria[1], VAR_DIGIT, array("null"));
+   }
+
+   function PrintForm()
+   {
+     if ( $this->db->baseGetDBVersion() >= 103 )
+     {
+        echo '<SELECT NAME="ossim_priority[0]">
+                <OPTION VALUE=" " '.chk_select($this->criteria[0],"="). '>__</OPTION>
+                <OPTION VALUE="=" '.chk_select($this->criteria[0],"=").'>==</OPTION>
+                <OPTION VALUE="!=" '.chk_select($this->criteria[0],"!=").'>!=</OPTION>
+                <OPTION VALUE="<"  '.chk_select($this->criteria[0],"<"). '><</OPTION>
+                <OPTION VALUE=">"  '.chk_select($this->criteria[0],">").'>></OPTION>
+                <OPTION VALUE="<=" '.chk_select($this->criteria[0],"><="). '><=</OPTION>
+                <OPTION VALUE=">=" '.chk_select($this->criteria[0],">=").'>>=</SELECT>';
+ 
+        echo '<SELECT NAME="ossim_priority[1]">
+                <OPTION VALUE="" '.chk_select($this->criteria[1], " ").'>{ any Priority }</OPTION>
+                <OPTION VALUE="0" '.chk_select($this->criteria[1], "0").'>0</OPTION>
+                <OPTION VALUE="1" '.chk_select($this->criteria[1], "1").'>1</OPTION>
+                <OPTION VALUE="2" '.chk_select($this->criteria[1], "2").'>2</OPTION>
+                <OPTION VALUE="3" '.chk_select($this->criteria[1], "3").'>3</OPTION>
+                <OPTION VALUE="4" '.chk_select($this->criteria[1], "4").'>4</OPTION>
+                <OPTION VALUE="5" '.chk_select($this->criteria[1], "5").'>5</OPTION>';
+        echo '</SELECT>&nbsp;&nbsp';
+      }     
+    }
+ 
+    function ToSQL()
+    {
+    /* convert this criteria to SQL */
+    }
+ 
+    function Description()
+    {
+       $tmp = "";
+ 
+       if ( $this->db->baseGetDBVersion() >= 103 )
+       {
+          if ( $this->criteria[1] != " " && $this->criteria[1] != "" )
+          {
+             if ( $this->criteria[1] == null)
+                $tmp = $tmp.'Ossim Priority = '.
+                               '<I>none</I><BR>';
+             else
+                $tmp = $tmp.'Ossim Priority '.$this->criteria[0]." ".$this->criteria[1].
+                       $this->cs->GetClearCriteriaString($this->export_name).'<BR>';
+          }
+       }
+ 
+       return $tmp;
+    }
+ };  /* OssimPriorityCriteria */
+
+class OssimRiskACriteria extends SingleElementCriteria
+{
+   function Init()
+   {
+     $this->criteria = "";
+   }
+                                                                                                                                                             
+   function Clear()
+   {
+     /* clears the criteria */
+   }
+                                                                                                                                                             
+   function SanitizeElement()
+   {
+      $this->criteria = CleanVariable($this->criteria, VAR_DIGIT);
+   }
+                                                                                                                                                             
+   function PrintForm()
+   {
+      echo '<SELECT NAME="ossim_risk_a">
+             <OPTION VALUE=" " '.chk_select($this->criteria, " ").'>{ any risk }</OPTION>
+	     <OPTION VALUE="low" '.chk_select($this->criteria, "low"). '>Low</OPTION>
+             <OPTION VALUE="medium" '.chk_select($this->criteria, "medium"). '>Medium</OPTION>
+	     <OPTION VALUE="high" '.chk_select($this->criteria, "high"). '>High</OPTION>';
+
+      echo '</SELECT>&nbsp;&nbsp';
+   }
+                                                                                                                                                             
+   function ToSQL()
+   {
+     /* convert this criteria to SQL */
+   }
+                                                                                                                                                             
+   function Description()
+   {
+     $tmp = "";
+                                                                                                                                                             
+     if ( $this->criteria != " " && $this->criteria != "" )
+        $tmp = $tmp.'Ossim Risk A = ['.$this->criteria.'] '."".
+               $this->cs->GetClearCriteriaString($this->export_name).'<BR>';
+                                                                                                                                                             
+      return $tmp;
+    }
+ };  /* OssimRiskACriteria */
+
+class OssimRiskCCriteria extends SingleElementCriteria
+{
+   function Init()
+   {
+     $this->criteria = "";
+   }
+
+   function Clear()
+   {
+    /* clears the criteria */
+   }
+
+   function SanitizeElement()
+   {
+      $this->criteria[0] = CleanVariable($this->criteria[0], "", array("=", "!=", "<", "<=", ">", ">="));
+      $this->criteria[1] = CleanVariable($this->criteria[1], VAR_DIGIT, array("null"));
+   }
+
+   function PrintForm()
+   {
+     if ( $this->db->baseGetDBVersion() >= 103 )
+     {
+        echo '<SELECT NAME="ossim_risk_c[0]">
+                <OPTION VALUE=" " '.chk_select($this->criteria[0],"="). '>__</OPTION>
+                <OPTION VALUE="=" '.chk_select($this->criteria[0],"=").'>==</OPTION>
+                <OPTION VALUE="!=" '.chk_select($this->criteria[0],"!=").'>!=</OPTION>
+                <OPTION VALUE="<"  '.chk_select($this->criteria[0],"<"). '><</OPTION>
+                <OPTION VALUE=">"  '.chk_select($this->criteria[0],">").'>></OPTION>
+                <OPTION VALUE="<=" '.chk_select($this->criteria[0],"><="). '><=</OPTION>
+                <OPTION VALUE=">=" '.chk_select($this->criteria[0],">=").'>>=</SELECT>';
+ 
+        echo '<SELECT NAME="ossim_risk_c[1]">
+                <OPTION VALUE="" '.chk_select($this->criteria[1], " ").'>{ any Risk }</OPTION>
+                <OPTION VALUE="0" '.chk_select($this->criteria[1], "0").'>0</OPTION>
+                <OPTION VALUE="1" '.chk_select($this->criteria[1], "1").'>1</OPTION>
+                <OPTION VALUE="2" '.chk_select($this->criteria[1], "2").'>2</OPTION>
+                <OPTION VALUE="3" '.chk_select($this->criteria[1], "3").'>3</OPTION>
+                <OPTION VALUE="4" '.chk_select($this->criteria[1], "4").'>4</OPTION>
+                <OPTION VALUE="5" '.chk_select($this->criteria[1], "5").'>5</OPTION>
+                <OPTION VALUE="6" '.chk_select($this->criteria[1], "6").'>6</OPTION>
+                <OPTION VALUE="7" '.chk_select($this->criteria[1], "7").'>7</OPTION>
+                <OPTION VALUE="8" '.chk_select($this->criteria[1], "8").'>8</OPTION>
+                <OPTION VALUE="9" '.chk_select($this->criteria[1], "9").'>9</OPTION>
+                <OPTION VALUE="10" '.chk_select($this->criteria[1], "10").'>10</OPTION>';
+        echo '</;SELECT>&nbsp;&nbsp';
+      }     
+    }
+ 
+    function ToSQL()
+    {
+    /* convert this criteria to SQL */
+    }
+ 
+    function Description()
+    {
+       $tmp = "";
+ 
+       if ( $this->db->baseGetDBVersion() >= 103 )
+       {
+          if ( $this->criteria[1] != " " && $this->criteria[1] != "" )
+          {
+             if ( $this->criteria[1] == null)
+                $tmp = $tmp.'Ossim Risk = '.
+                               '<I>none</I><BR>';
+             else
+                $tmp = $tmp.'Ossim Risk '.$this->criteria[0]." ".$this->criteria[1].
+                       $this->cs->GetClearCriteriaString($this->export_name).'<BR>';
+          }
+       }
+ 
+       return $tmp;
+    }
+ };  /* OssimRiskCCriteria */
+
+class OssimReliabilityCriteria extends SingleElementCriteria
+{
+   function Init()
+   {
+     $this->criteria = "";
+   }
+
+   function Clear()
+   {
+    /* clears the criteria */
+   }
+
+   function SanitizeElement()
+   {
+      $this->criteria[0] = CleanVariable($this->criteria[0], "", array("=", "!=", "<", "<=", ">", ">="));
+      $this->criteria[1] = CleanVariable($this->criteria[1], VAR_DIGIT, array("null"));
+   }
+
+   function PrintForm()
+   {
+     if ( $this->db->baseGetDBVersion() >= 103 )
+     {
+        echo '<SELECT NAME="ossim_reliability[0]">
+                <OPTION VALUE=" " '.chk_select($this->criteria[0],"="). '>__</OPTION>
+                <OPTION VALUE="=" '.chk_select($this->criteria[0],"=").'>==</OPTION>
+                <OPTION VALUE="!=" '.chk_select($this->criteria[0],"!=").'>!=</OPTION>
+                <OPTION VALUE="<"  '.chk_select($this->criteria[0],"<"). '><</OPTION>
+                <OPTION VALUE=">"  '.chk_select($this->criteria[0],">").'>></OPTION>
+                <OPTION VALUE="<=" '.chk_select($this->criteria[0],"><="). '><=</OPTION>
+                <OPTION VALUE=">=" '.chk_select($this->criteria[0],">=").'>>=</SELECT>';
+
+        echo '<SELECT NAME="ossim_reliability[1]">
+                <OPTION VALUE="" '.chk_select($this->criteria[1], " ").'>{ any Reliability }</OPTION>
+                <OPTION VALUE="0" '.chk_select($this->criteria[1], "0").'>0</OPTION>
+                <OPTION VALUE="1" '.chk_select($this->criteria[1], "1").'>1</OPTION>
+                <OPTION VALUE="2" '.chk_select($this->criteria[1], "2").'>2</OPTION>
+                <OPTION VALUE="3" '.chk_select($this->criteria[1], "3").'>3</OPTION>
+                <OPTION VALUE="4" '.chk_select($this->criteria[1], "4").'>4</OPTION>
+                <OPTION VALUE="5" '.chk_select($this->criteria[1], "5").'>5</OPTION>
+                <OPTION VALUE="6" '.chk_select($this->criteria[1], "6").'>6</OPTION>
+                <OPTION VALUE="7" '.chk_select($this->criteria[1], "7").'>7</OPTION>
+                <OPTION VALUE="8" '.chk_select($this->criteria[1], "8").'>8</OPTION>
+                <OPTION VALUE="9" '.chk_select($this->criteria[1], "9").'>9</OPTION>
+                <OPTION VALUE="10" '.chk_select($this->criteria[1], "10").'>10</OPTION>';
+        echo '</SELECT>&nbsp;&nbsp';
+      }     
+    }
+ 
+    function ToSQL()
+    {
+    /* convert this criteria to SQL */
+    }
+ 
+    function Description()
+    {
+       $tmp = "";
+ 
+       if ( $this->db->baseGetDBVersion() >= 103 )
+       {
+          if ( $this->criteria[1] != " " && $this->criteria[1] != "" )
+          {
+             if ( $this->criteria[1] == null)
+                $tmp = $tmp.'Ossim Reliability = '.
+                               '<I>none</I><BR>';
+             else
+                $tmp = $tmp.'Ossim Reliability '.$this->criteria[0]." ".$this->criteria[1].
+                       $this->cs->GetClearCriteriaString($this->export_name).'<BR>';
+          }
+       }
+ 
+       return $tmp;
+    }
+ };  /* OssimReliabilityCriteria */
+
+class OssimAssetSrcCriteria extends SingleElementCriteria
+{
+   function Init()
+   {
+     $this->criteria = "";
+   }
+
+   function Clear()
+   {
+    /* clears the criteria */
+   }
+
+   function SanitizeElement()
+   {
+      $this->criteria[0] = CleanVariable($this->criteria[0], "", array("=", "!=", "<", "<=", ">", ">="));
+      $this->criteria[1] = CleanVariable($this->criteria[1], VAR_DIGIT, array("null"));
+   }
+
+   function PrintForm()
+   {
+     if ( $this->db->baseGetDBVersion() >= 103 )
+     {
+        echo '<SELECT NAME="ossim_asset_src[0]">
+                <OPTION VALUE=" " '.chk_select($this->criteria[0],"="). '>__</OPTION>
+                <OPTION VALUE="=" '.chk_select($this->criteria[0],"=").'>==</OPTION>
+                <OPTION VALUE="!=" '.chk_select($this->criteria[0],"!=").'>!=</OPTION>
+                <OPTION VALUE="<"  '.chk_select($this->criteria[0],"<"). '><</OPTION>
+                <OPTION VALUE=">"  '.chk_select($this->criteria[0],">").'>></OPTION>
+                <OPTION VALUE="<=" '.chk_select($this->criteria[0],"><="). '><=</OPTION>
+                <OPTION VALUE=">=" '.chk_select($this->criteria[0],">=").'>>=</SELECT>';
+ 
+        echo '<SELECT NAME="ossim_asset_src[1]">
+                <OPTION VALUE="" '.chk_select($this->criteria[1], " ").'>{ any Asset }</OPTION>
+                <OPTION VALUE="0" '.chk_select($this->criteria[1], "0").'>0</OPTION>
+                <OPTION VALUE="1" '.chk_select($this->criteria[1], "1").'>1</OPTION>
+                <OPTION VALUE="2" '.chk_select($this->criteria[1], "2").'>2</OPTION>
+                <OPTION VALUE="3" '.chk_select($this->criteria[1], "3").'>3</OPTION>
+                <OPTION VALUE="4" '.chk_select($this->criteria[1], "4").'>4</OPTION>
+                <OPTION VALUE="5" '.chk_select($this->criteria[1], "5").'>5</OPTION>';
+        echo '</SELECT>&nbsp;&nbsp';
+      }     
+    }
+ 
+    function ToSQL()
+    {
+    /* convert this criteria to SQL */
+    }
+ 
+    function Description()
+    {
+       $tmp = "";
+ 
+       if ( $this->db->baseGetDBVersion() >= 103 )
+       {
+          if ( $this->criteria[1] != " " && $this->criteria[1] != "" )
+          {
+             if ( $this->criteria[1] == null)
+                $tmp = $tmp.'Ossim Asset = '.
+                               '<I>none</I><BR>';
+             else
+                $tmp = $tmp.'Ossim Asset '.$this->criteria[0]." ".$this->criteria[1].
+                       $this->cs->GetClearCriteriaString($this->export_name).'<BR>';
+          }
+       }
+ 
+       return $tmp;
+    }
+ };  /* OssimAssetSrcCriteria */
+
+class OssimAssetDstCriteria extends SingleElementCriteria
+{
+   function Init()
+   {
+     $this->criteria = "";
+   }
+
+   function Clear()
+   {
+    /* clears the criteria */
+   }
+
+   function SanitizeElement()
+   {
+      $this->criteria[0] = CleanVariable($this->criteria[0], "", array("=", "!=", "<", "<=", ">", ">="));
+      $this->criteria[1] = CleanVariable($this->criteria[1], VAR_DIGIT, array("null"));
+   }
+
+   function PrintForm()
+   {
+     if ( $this->db->baseGetDBVersion() >= 103 )
+     {
+        echo '<SELECT NAME="ossim_asset_dst[0]">
+                <OPTION VALUE=" " '.chk_select($this->criteria[0],"="). '>__</OPTION>
+                <OPTION VALUE="=" '.chk_select($this->criteria[0],"=").'>==</OPTION>
+                <OPTION VALUE="!=" '.chk_select($this->criteria[0],"!=").'>!=</OPTION>
+                <OPTION VALUE="<"  '.chk_select($this->criteria[0],"<"). '><</OPTION>
+                <OPTION VALUE=">"  '.chk_select($this->criteria[0],">").'>></OPTION>
+                <OPTION VALUE="<=" '.chk_select($this->criteria[0],"><="). '><=</OPTION>
+                <OPTION VALUE=">=" '.chk_select($this->criteria[0],">=").'>>=</SELECT>';
+ 
+        echo '<SELECT NAME="ossim_asset_dst[1]">
+                <OPTION VALUE="" '.chk_select($this->criteria[1], " ").'>{ any Asset }</OPTION>
+ 	        <OPTION VALUE="0" '.chk_select($this->criteria[1], "0").'>0</OPTION>
+		<OPTION VALUE="1" '.chk_select($this->criteria[1], "1").'>1</OPTION>
+		<OPTION VALUE="2" '.chk_select($this->criteria[1], "2").'>2</OPTION>
+		<OPTION VALUE="3" '.chk_select($this->criteria[1], "3").'>3</OPTION>
+		<OPTION VALUE="4" '.chk_select($this->criteria[1], "4").'>4</OPTION>
+		<OPTION VALUE="5" '.chk_select($this->criteria[1], "5").'>5</OPTION>';
+        echo '</SELECT>&nbsp;&nbsp';
+      }     
+    }
+ 
+    function ToSQL()
+    {
+    /* convert this criteria to SQL */
+    }
+ 
+    function Description()
+    {
+       $tmp = "";
+ 
+       if ( $this->db->baseGetDBVersion() >= 103 )
+       {
+          if ( $this->criteria[1] != " " && $this->criteria[1] != "" )
+          {
+             if ( $this->criteria[1] == null)
+                $tmp = $tmp.'Ossim Asset = '.
+                               '<I>none</I><BR>';
+             else
+                $tmp = $tmp.'Ossim Asset '.$this->criteria[0]." ".$this->criteria[1].
+                       $this->cs->GetClearCriteriaString($this->export_name).'<BR>';
+          }
+       }
+ 
+       return $tmp;
+    }
+ };  /* OssimAssetDstCriteria */
+
+
+class OssimTypeCriteria extends SingleElementCriteria
+{
+   function Init()
+   {
+     $this->criteria = "";
+   }
+                                                                                                                                                             
+   function Clear()
+   {
+    /* clears the criteria */
+   }
+                                                                                                                                                             
+   function SanitizeElement()
+   {
+      $this->criteria = CleanVariable($this->criteria, VAR_DIGIT);
+   }
+                                                                                                                                                             
+   function PrintForm()
+   {
+     if ( $this->db->baseGetDBVersion() >= 103 )
+     {
+        echo '<SELECT NAME="ossim_type[1]">
+                <OPTION VALUE="" '.chk_select($this->criteria[1], " ").'>{ any }</OPTION>
+                <OPTION VALUE="2" '.chk_select($this->criteria[1], "2").'>Alarm</OPTION>';
+        echo '</SELECT>&nbsp;&nbsp';
+      }
+    }
+    function ToSQL()
+    {
+    /* convert this criteria to SQL */
+    }
+                                                                                                                                                             
+    function Description()
+    {
+       $tmp = "";
+                                                                                                                                                             
+       if ( $this->db->baseGetDBVersion() >= 103 )
+       {
+          if ( $this->criteria[1] != " " && $this->criteria[1] != "" )
+          {
+             if ( $this->criteria[1] == null)
+                $tmp = $tmp.'Ossim Type = '.
+                               '<I>none</I><BR>';
+             else
+                $tmp = $tmp.'Ossim Type '.$this->criteria[0]." ".$this->criteria[1].
+                       $this->cs->GetClearCriteriaString($this->export_name).'<BR>';
+          }
+       }
+                                                                                                                                 
+       return $tmp;
+    }
+ };  /* OssimTypeCriteria */
 ?>
diff -urNb base-1.1.2/includes/base_state_criteria.inc.php base-1.1.2-ossim/includes/base_state_criteria.inc.php
--- base-1.1.2/includes/base_state_criteria.inc.php	Sat Apr  9 01:38:34 2005
+++ base-1.1.2-ossim/includes/base_state_criteria.inc.php	Mon Apr 11 17:30:25 2005
@@ -61,6 +61,14 @@
      $this->criteria['icmp_field'] = new ICMPFieldCriteria($tdb, $obj, "icmp_field", PROTO_CFCNT);
      $this->criteria['rawip_field'] = new TCPFieldCriteria($tdb, $obj, "rawip_field", PROTO_CFCNT);
      $this->criteria['data'] = new DataCriteria($tdb, $obj, "data", PAYLOAD_CFCNT);
+     $this->criteria['ossim_type'] = new OssimTypeCriteria(&$db, &$this, "ossim_type");
+     $this->criteria['ossim_priority'] = new OssimPriorityCriteria(&$db, &$this, "ossim_priority");
+     $this->criteria['ossim_reliability'] = new OssimReliabilityCriteria(&$db, &$this, "ossim_reliability");
+     $this->criteria['ossim_asset_src'] = new OssimAssetSrcCriteria(&$db, &$this, "ossim_asset_src");
+     $this->criteria['ossim_asset_dst'] = new OssimAssetDstCriteria(&$db, &$this, "ossim_asset_dst");
+     $this->criteria['ossim_risk_c'] = new OssimRiskCCriteria(&$db, &$this, "ossim_risk_c");
+     $this->criteria['ossim_risk_a'] = new OssimRiskACriteria(&$db, &$this, "ossim_risk_a");
+
 
      /* 
       * For new criteria, add a call to the appropriate constructor here, and implement
@@ -142,6 +150,7 @@
        ErrorMessage(_REMOVE." '$name' "._FROMCRIT);
   
        $this->criteria[$name]->Init();     
+       $this->criteria[$name]->Import();     
     }
     else
       ErrorMessage(_ERRCRITELEM);
diff -urNb base-1.1.2/includes/base_state_criteria.inc.php.orig base-1.1.2-ossim/includes/base_state_criteria.inc.php.orig
--- base-1.1.2/includes/base_state_criteria.inc.php.orig	Thu Jan  1 01:00:00 1970
+++ base-1.1.2-ossim/includes/base_state_criteria.inc.php.orig	Sat Apr  9 01:38:34 2005
@@ -0,0 +1,283 @@
+<?php
+/*******************************************************************************
+** Basic Analysis and Security Engine (BASE)
+** Copyright (C) 2004 BASE Project Team
+** Copyright (C) 2000 Carnegie Mellon University
+**
+** (see the file 'base_main.php' for license details)
+**
+** Project Lead: Kevin Johnson <kjohnson@secureideas.net>
+** Built upon work by Roman Danyliw <rdd@cert.org>, <roman@danyliw.com>
+**
+** Purpose: routines to manipulate shared state (session information)
+********************************************************************************
+** Authors:
+********************************************************************************
+** Kevin Johnson <kjohnson@secureideas.net
+**
+********************************************************************************
+*/
+/** The below check is to make sure that the conf file has been loaded before this one....
+ **  This should prevent someone from accessing the page directly. -- Kevin
+ **/
+defined( '_BASE_INC' ) or die( 'Accessing this file directly is not allowed.' );
+
+include_once("$BASE_path/includes/base_state_common.inc.php");
+include_once("$BASE_path/includes/base_state_citems.inc.php");
+
+class CriteriaState
+{
+  var $clear_criteria_name;
+  var $clear_criteria_element;
+  var $clear_url;
+  var $clear_url_params;
+
+  var $criteria;
+
+  function CriteriaState($url, $params = "")
+  {
+     $this->clear_url = $url;
+     $this->clear_url_params = $params;
+
+     /* XXX-SEC */
+     GLOBAL $db;
+
+	$tdb =& $db;
+	$obj =& $this;
+     $this->criteria['sig'] = new SignatureCriteria($tdb, $obj, "sig");
+     $this->criteria['sig_class'] = new SignatureClassificationCriteria($tdb, $obj, "sig_class");
+     $this->criteria['sig_priority'] = new SignaturePriorityCriteria($tdb, $obj, "sig_priority");
+     $this->criteria['ag'] = new AlertGroupCriteria($tdb, $obj, "ag");
+     $this->criteria['sensor'] = new SensorCriteria($tdb, $obj, "sensor");
+     $this->criteria['time'] = new TimeCriteria($tdb, $obj, "time", TIME_CFCNT);
+     $this->criteria['ip_addr'] = new IPAddressCriteria($tdb, $obj, "ip_addr", IPADDR_CFCNT);
+     $this->criteria['layer4'] = new Layer4Criteria($tdb, $obj, "layer4");
+     $this->criteria['ip_field'] = new IPFieldCriteria($tdb, $obj, "ip_field", PROTO_CFCNT);
+     $this->criteria['tcp_port'] = new TCPPortCriteria($tdb, $obj, "tcp_port", PROTO_CFCNT);
+     $this->criteria['tcp_flags'] = new TCPFlagsCriteria($tdb, $obj, "tcp_flags");
+     $this->criteria['tcp_field'] = new TCPFieldCriteria($tdb, $obj, "tcp_field", PROTO_CFCNT);
+     $this->criteria['udp_port'] = new UDPPortCriteria($tdb, $obj, "udp_port", PROTO_CFCNT);
+     $this->criteria['udp_field'] = new UDPFieldCriteria($tdb, $obj, "udp_field", PROTO_CFCNT);
+     $this->criteria['icmp_field'] = new ICMPFieldCriteria($tdb, $obj, "icmp_field", PROTO_CFCNT);
+     $this->criteria['rawip_field'] = new TCPFieldCriteria($tdb, $obj, "rawip_field", PROTO_CFCNT);
+     $this->criteria['data'] = new DataCriteria($tdb, $obj, "data", PAYLOAD_CFCNT);
+
+     /* 
+      * For new criteria, add a call to the appropriate constructor here, and implement
+      * the appropriate class in base_stat_citems.inc.
+      */
+  }
+
+  function InitState()
+  {
+     RegisterGlobalState();
+  
+     $valid_criteria_list = array_keys($this->criteria);
+
+     foreach ( $valid_criteria_list as $cname )
+         $this->criteria[$cname]->Init();
+  }
+
+  function ReadState()
+  {
+     RegisterGlobalState();
+
+     /* 
+      * If the BACK button was clicked, shuffle the appropriate
+      * criteria variables from the $back_list (history) array into
+      * the current session ($_SESSION)
+      */
+     if ( ($GLOBALS['maintain_history'] == 1) &&
+          (ImportHTTPVar("back", VAR_DIGIT) == 1) )
+     {
+        PopHistory();
+     }
+
+     /* 
+      * Import, update and sanitize all persistant criteria variables 
+      */
+     $valid_criteria_list = array_keys($this->criteria);
+     foreach ( $valid_criteria_list as $cname )
+     {
+        $this->criteria[$cname]->Import();
+        $this->criteria[$cname]->Sanitize();
+     }
+
+     /* 
+      * Check whether criteria elements need to be cleared 
+      */
+     $this->clear_criteria_name = ImportHTTPVar("clear_criteria", "", 
+                                                array_keys($this->criteria));
+     $this->clear_criteria_element = ImportHTTPVar("clear_criteria_element", "", 
+                                                   array_keys($this->criteria));
+
+     if ( $this->clear_criteria_name != "" )
+        $this->ClearCriteriaStateElement($this->clear_criteria_name,
+                                         $this->clear_criteria_element);
+
+     /*
+      * Save the current criteria into $back_list (history)
+      */
+     if ( $GLOBALS['maintain_history'] == 1 )
+        PushHistory();
+  }
+
+  function GetBackLink()
+  {
+    return PrintBackButton();
+  }
+
+  function GetClearCriteriaString($name, $element = "")
+  {
+    return '&nbsp;&nbsp;<A HREF="'.$this->clear_url.'?clear_criteria='.$name.
+           '&clear_criteria_element='.$element.$this->clear_url_params.'">...clear...</A>';
+  }
+
+  function ClearCriteriaStateElement($name, $element)
+  {
+    $valid_criteria_list = array_keys($this->criteria);
+
+    if ( in_array($name, $valid_criteria_list) )
+    {
+       ErrorMessage(_REMOVE." '$name' "._FROMCRIT);
+  
+       $this->criteria[$name]->Init();     
+    }
+    else
+      ErrorMessage(_ERRCRITELEM);
+  }
+}
+
+/* ***********************************************************************
+ * Function: PopHistory()
+ *
+ * @doc Remove and restore the last entry of the history list (i.e., 
+ *      hit the back button in the browser)
+ *     
+ * @see PushHistory PrintBackButton
+ *
+ ************************************************************************/
+function PopHistory()
+{
+   if ( $_SESSION['back_list_cnt'] >= 0 )
+   {
+      /* Remove the state of the page from which the back button was
+       * just hit
+       */
+      unset($_SESSION['back_list'][$_SESSION['back_list_cnt']]);
+
+      /* 
+       * save a copy of the $back_list because session_destroy()/session_decode() will 
+       * overwrite it. 
+       */
+      $save_back_list = $_SESSION['back_list'];
+      $save_back_list_cnt = $_SESSION['back_list_cnt']-1;
+
+      /* Restore the session 
+       *   - destroy all variables in the current session
+       *   - restore proper back_list history entry into the current variables (session)
+       *       - but, first delete the currently restored entry and 
+       *              decremement the history stack
+       *   - push saved back_list back into session
+       */
+      session_unset();
+
+      if ( $GLOBALS['debug_mode'] > 2 )
+         ErrorMessage("Popping a History Entry from #".$save_back_list_cnt);
+
+      session_decode($save_back_list[$save_back_list_cnt]["session"]);
+      unset($save_back_list[$save_back_list_cnt]);
+      --$save_back_list_cnt;
+
+      $_SESSION['back_list'] = $save_back_list;
+      $_SESSION['back_list_cnt'] = $save_back_list_cnt;
+   }
+}
+
+/* ***********************************************************************
+ * Function: PushHistory()
+ *
+ * @doc Save the current criteria into the history list ($back_list, 
+ *      $back_list_cnt) in order to support the BASE back button.
+ *     
+ * @see PopHistory PrintBackButton
+ *
+ ************************************************************************/
+function PushHistory()
+{
+   if ( $GLOBALS['debug_mode'] > 1 )
+   {
+      ErrorMessage("Saving state (into ".$_SESSION['back_list_cnt'].")");
+   }
+
+   /* save the current session without the $back_list into the history 
+    *   - make a temporary copy of the $back_list
+    *   - NULL-out the $back_list in $_SESSION (so that 
+    *       the current session is serialized without these variables)
+    *   - serialize the current session
+    *   - fix-up the QUERY_STRING
+    *       - make a new QUERY_STRING that includes the temporary QueryState variables
+    *       - remove &back=1 from any QUERY_STRING
+    *   - add the current session into the $back_list (history)
+    */
+   $tmp_back_list = $_SESSION['back_list'];
+   $tmp_back_list_cnt = $_SESSION['back_list_cnt'];
+
+   $_SESSION['back_list'] = NULL;
+   $_SESSION['back_list_cnt'] = -1;
+
+   $full_session = session_encode();
+   $_SESSION['back_list'] = $tmp_back_list;
+   $_SESSION['back_list_cnt'] = $tmp_back_list_cnt;
+
+   $query_string = $_SERVER["QUERY_STRING"];
+   if ( isset($_POST['caller']) ) $query_string .= "&caller=".$_POST['caller'];
+   if ( isset($_POST['num_result_rows']) ) $query_string .= "&num_result_rows=".$_POST['num_result_rows'];
+   if ( isset($_POST['sort_order']) ) $query_string .= "&sort_order=".$_POST['sort_order'];
+   if ( isset($_POST['current_view']) ) $query_string .= "&current_view=".$_POST['current_view'];
+   if ( isset($_POST['submit']) ) $query_string .= "&submit=".$_POST['submit'];
+
+   $query_string = ereg_replace("back=1&", "", $query_string);
+
+   ++$_SESSION['back_list_cnt'];
+   $_SESSION['back_list'][$_SESSION['back_list_cnt']] =  
+          array ("SCRIPT_NAME"     => $_SERVER["SCRIPT_NAME"],
+                 "QUERY_STRING" => $query_string, 
+                 "session"      => $full_session );
+
+  if ( $GLOBALS['debug_mode'] > 1 )
+  {
+      ErrorMessage("Insert session into slot #".$_SESSION['back_list_cnt']);
+
+      echo "Back List (Cnt = ".$_SESSION['back_list_cnt'].") <PRE>";
+      print_r($_SESSION['back_list']);
+      echo "</PRE>";
+  }
+}
+
+/* ***********************************************************************
+ * Function: PrintBackButton()
+ *
+ * @doc Returns a string with the URL of the previously viewed
+ *      page.  Clicking this link is equivalent to using the browser
+ *      back-button, but all the associated BASE meta-information 
+ *      propogates correctly.
+ *     
+ * @see PushHistory PopHistory
+ *
+ ************************************************************************/
+function PrintBackButton()
+{
+   if ( $GLOBALS['maintain_history'] == 0 )
+      return "<FONT>Back</FONT>";
+
+   $criteria_num = $_SESSION['back_list_cnt'] - 1;
+
+   if ( isset($_SESSION['back_list'][$criteria_num]["SCRIPT_NAME"]) )
+     return "<FONT><A HREF=\"".$_SESSION['back_list'][$criteria_num]["SCRIPT_NAME"].
+            "?back=1&".
+            $_SESSION['back_list'][$criteria_num]["QUERY_STRING"]."\">Back</A></FONT>";
+   else
+     return "<FONT>Back</FONT>";
+}
+?>
diff -urNb base-1.1.2/sql/create_base_tbls_mysql.sql base-1.1.2-ossim/sql/create_base_tbls_mysql.sql
--- base-1.1.2/sql/create_base_tbls_mysql.sql	Sat Apr  9 01:38:34 2005
+++ base-1.1.2-ossim/sql/create_base_tbls_mysql.sql	Mon Apr 11 17:29:47 2005
@@ -89,6 +89,55 @@
                             PRIMARY KEY         (ipc_ip),
                             INDEX               (ipc_ip) );
 
+
+--
+-- OSSIM Patch
+--
+
+--
+-- Table: ossim_event
+--
+DROP TABLE IF EXISTS ossim_event;
+CREATE TABLE ossim_event (
+   sid     INT NOT NULL,
+   cid     INT NOT NULL,
+   type            INT NOT NULL,
+   priority    INT DEFAULT 1,
+   reliability INT DEFAULT 1,
+   asset_src   INT DEFAULT 1,
+   asset_dst   INT DEFAULT 1,
+   risk_c      INT DEFAULT 1,
+   risk_a      INT DEFAULT 1,
+   PRIMARY KEY (sid, cid),
+   INDEX       (type),
+        INDEX           (priority),
+        INDEX           (reliability),
+        INDEX           (asset_src),
+        INDEX           (asset_dst),
+        INDEX           (risk_c),
+        INDEX           (risk_a)
+);
+
+--
+-- Alter Tables acid_event
+--
+ALTER TABLE acid_event ADD COLUMN ossim_type INT DEFAULT 1;
+ALTER TABLE acid_event ADD COLUMN ossim_priority INT DEFAULT 1;
+ALTER TABLE acid_event ADD COLUMN ossim_reliability INT DEFAULT 1;
+ALTER TABLE acid_event ADD COLUMN ossim_asset_src INT DEFAULT 1;
+ALTER TABLE acid_event ADD COLUMN ossim_asset_dst INT DEFAULT 1;
+ALTER TABLE acid_event ADD COLUMN ossim_risk_c INT DEFAULT 1;
+ALTER TABLE acid_event ADD COLUMN ossim_risk_a INT DEFAULT 1;
+
+CREATE INDEX acid_event_ossim_type ON acid_event (ossim_type);
+CREATE INDEX acid_event_ossim_priority ON acid_event (ossim_priority);
+CREATE INDEX acid_event_ossim_reliability ON acid_event (ossim_reliability);
+CREATE INDEX acid_event_ossim_asset_src ON acid_event (ossim_asset_src);
+CREATE INDEX acid_event_ossim_asset_dst ON acid_event (ossim_asset_dst);
+CREATE INDEX acid_event_ossim_risk_c ON acid_event (ossim_risk_c);
+CREATE INDEX acid_event_ossim_risk_a ON acid_event (ossim_risk_a);
+
+
 CREATE TABLE `base_roles` ( `role_id`           int(11)         NOT NULL,
                             `role_name`         varchar(20)     NOT NULL,
                             `role_desc`         varchar(75)     NOT NULL,
diff -urNb base-1.1.2/sql/create_base_tbls_pgsql.sql base-1.1.2-ossim/sql/create_base_tbls_pgsql.sql
--- base-1.1.2/sql/create_base_tbls_pgsql.sql	Sat Apr  9 01:38:34 2005
+++ base-1.1.2-ossim/sql/create_base_tbls_pgsql.sql	Mon Apr 11 17:29:47 2005
@@ -100,4 +100,69 @@
 INSERT INTO base_roles (role_id, role_name, role_desc) VALUES (1, 'Admin', 'Administrator');
 INSERT INTO base_roles (role_id, role_name, role_desc) VALUES (10, 'user', 'Authenticated User');
 INSERT INTO base_roles (role_id, role_name, role_desc) VALUES (10000, 'anonymous', 'Anonymous User');
+SSIM Patch
+--
+
+--
+-- Table: ossim_event
+--
+CREATE TABLE ossim_event (
+        sid             INT8 NOT NULL,
+        cid             INT8 NOT NULL,
+        type            INT8 DEFAULT 1,
+        priority        INT8 DEFAULT 1,
+        reliability     INT8 DEFAULT 1,
+        asset_src       INT8 DEFAULT 1,
+        asset_dst       INT8 DEFAULT 1,
+        risk_c          INT8 DEFAULT 1,
+        risk_a          INT8 DEFAULT 1,
+        PRIMARY KEY (sid, cid)
+);
+
+CREATE INDEX acid_event_type_idx ON ossim_event (type);
+CREATE INDEX acid_event_priority_idx ON ossim_event (priority);
+CREATE INDEX acid_event_reliability_idx ON ossim_event (reliability);
+CREATE INDEX acid_event_asset_src_idx ON ossim_event (asset_src);
+CREATE INDEX acid_event_asset_dst_idx ON ossim_event (asset_dst);
+CREATE INDEX acid_event_risk_c_idx ON ossim_event (risk_c);
+CREATE INDEX acid_event_risk_a_idx ON ossim_event (risk_a);
+
+CREATE INDEX acid_event_type_idx ON ossim_event (type);
+CREATE INDEX acid_event_priority_idx ON ossim_event (priority);
+CREATE INDEX acid_event_reliability_idx ON ossim_event (reliability);
+CREATE INDEX acid_event_asset_src_idx ON ossim_event (asset_src);
+CREATE INDEX acid_event_asset_dst_idx ON ossim_event (asset_dst);
+CREATE INDEX acid_event_risk_c_idx ON ossim_event (risk_c);
+CREATE INDEX acid_event_risk_a_idx ON ossim_event (risk_a);
+
+--
+-- Alter Tables acid_event
+--
+ALTER TABLE acid_event ADD COLUMN ossim_type INT8;
+ALTER TABLE acid_event ADD COLUMN ossim_priority INT8;
+ALTER TABLE acid_event ADD COLUMN ossim_reliability INT8;
+ALTER TABLE acid_event ADD COLUMN ossim_asset_src INT8;
+ALTER TABLE acid_event ADD COLUMN ossim_asset_dst INT8;
+ALTER TABLE acid_event ADD COLUMN ossim_risk_c INT8;
+ALTER TABLE acid_event ADD COLUMN ossim_risk_a INT8;
+                                                                                                                                                             
+ALTER TABLE acid_event ALTER COLUMN ossim_type SET DEFAULT 1;
+ALTER TABLE acid_event ALTER COLUMN ossim_priority SET DEFAULT 1;
+ALTER TABLE acid_event ALTER COLUMN ossim_reliability SET DEFAULT 1;
+ALTER TABLE acid_event ALTER COLUMN ossim_asset_src SET DEFAULT 1;
+ALTER TABLE acid_event ALTER COLUMN ossim_asset_dst SET DEFAULT 1;
+ALTER TABLE acid_event ALTER COLUMN ossim_risk_c SET DEFAULT 1;
+ALTER TABLE acid_event ALTER COLUMN ossim_risk_a SET DEFAULT 1;
+
+CREATE INDEX acid_event_ossim_type_idx ON acid_event (ossim_type);
+CREATE INDEX acid_event_ossim_priority_idx ON acid_event (ossim_priority);
+CREATE INDEX acid_event_ossim_reliability_idx ON acid_event (ossim_reliability);
+CREATE INDEX acid_event_ossim_asset_src_idx ON acid_event (ossim_asset_src);
+CREATE INDEX acid_event_ossim_asset_dst_idx ON acid_event (ossim_asset_dst);
+CREATE INDEX acid_event_ossim_risk_c_idx ON acid_event (ossim_risk_c);
+CREATE INDEX acid_event_ossim_risk_a_idx ON acid_event (ossim_risk_a);
+
+
 INSERT INTO base_roles (role_id, role_name, role_desc) VALUES (50, 'ag_editor', 'Alert Group Editor');
+
+
