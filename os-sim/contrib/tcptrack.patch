diff -Naur tcptrack-1.1.4/src/Makefile.am tcptrack-1.1.4-ossim/src/Makefile.am
--- tcptrack-1.1.4/src/Makefile.am	2004-10-06 01:29:00.000000000 +0200
+++ tcptrack-1.1.4-ossim/src/Makefile.am	2004-12-20 10:06:27.000000000 +0100
@@ -7,7 +7,8 @@
                  TCPPacket.cc NetworkPacket.cc \
                  IPv4TCPPacket.cc IPv4TCPCapture.cc \
                  TCPTrack.cc SocketPair4.cc \
-                 AppError.cc PcapError.cc GenericError.cc Guesser.cc
+                 AppError.cc PcapError.cc GenericError.cc Guesser.cc \
+				 TCPListener.cc
 
 noinst_HEADERS = Collector.h PacketBuffer.h TextUI.h \
 	defs.h Sniffer.h headers.h \
@@ -16,7 +17,8 @@
 	IPv4Packet.h IPv4Address.h TCPPacket.h NetworkPacket.h \
 	IPv4TCPPacket.h IPv4TCPCapture.h \
         TCPTrack.h SocketPair4.h \
-        AppError.h PcapError.h GenericError.h
+        AppError.h PcapError.h GenericError.h \
+		TCPListener.h
 
 man_MANS = tcptrack.1
 
diff -Naur tcptrack-1.1.4/src/Makefile.in tcptrack-1.1.4-ossim/src/Makefile.in
--- tcptrack-1.1.4/src/Makefile.in	2004-10-06 01:30:44.000000000 +0200
+++ tcptrack-1.1.4-ossim/src/Makefile.in	2004-12-20 10:06:27.000000000 +0100
@@ -59,7 +59,8 @@
 	NetworkPacket.$(OBJEXT) IPv4TCPPacket.$(OBJEXT) \
 	IPv4TCPCapture.$(OBJEXT) TCPTrack.$(OBJEXT) \
 	SocketPair4.$(OBJEXT) AppError.$(OBJEXT) PcapError.$(OBJEXT) \
-	GenericError.$(OBJEXT) Guesser.$(OBJEXT)
+	GenericError.$(OBJEXT) Guesser.$(OBJEXT) \
+	TCPListener.$(OBJEXT)
 tcptrack_OBJECTS = $(am_tcptrack_OBJECTS)
 tcptrack_LDADD = $(LDADD)
 DEFAULT_INCLUDES = -I. -I$(srcdir) -I$(top_builddir)
diff -Naur tcptrack-1.1.4/src/TCPListener.cc tcptrack-1.1.4-ossim/src/TCPListener.cc
--- tcptrack-1.1.4/src/TCPListener.cc	1970-01-01 01:00:00.000000000 +0100
+++ tcptrack-1.1.4-ossim/src/TCPListener.cc	2004-12-21 16:56:28.000000000 +0100
@@ -0,0 +1,206 @@
+/* 
+ *  Ths code in this file is part of tcptrack. For more information see
+ *    http://www.rhythm.cx/~steve/devel/tcptrack
+ *
+ *     Copyright (C) Steve Benson - 2003
+ *
+ *  tcptrack is free software; you can redistribute it and/or modify it
+ *  under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your
+ *  option) any later version.
+ *   
+ *  tcptrack is distributed in the hope that it will be useful, but
+ *  WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  General Public License for more details.
+ *   
+ *  You should have received a copy of the GNU General Public License
+ *  along with GNU Make; see the file COPYING.  If not, write to
+ *  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA. 
+ *  
+ */
+#include "TCPListener.h"
+#include <stdio.h>
+#include <assert.h>
+#include <stdlib.h>
+#include <signal.h>
+#include <iostream>
+#include <arpa/inet.h>
+#include "util.h"
+#include "defs.h"
+#include "IPv4Address.h"
+#include "TCPTrack.h"
+#include "GenericError.h"
+
+extern TCPTrack *app; 
+
+TCPListener::TCPListener( TCContainer *c, int p )
+{
+    container = c;
+    iter = NULL;
+    request_sp = NULL;
+    port = p;
+}
+
+void TCPListener::init()
+{
+    pthread_attr_t attr;
+    if (pthread_attr_init(&attr) != 0)
+        throw GenericError("pthread_attr_init() failed");
+
+    pthread_attr_setstacksize(&attr, SS_TUI);
+
+    if( pthread_create(&listener_tid,&attr,listener_thread_func,this) != 0 )
+        throw GenericError("pthread_create() returned an error.");
+}
+
+
+void TCPListener::stop()
+{
+	// pthread_join(listener_tid, NULL);
+}
+
+TCPListener::~TCPListener()
+{
+    stop();
+}
+
+// PRE:  *buff contains a connection with this format: 
+//       srcaddr:sport dstaddr:sport
+// POST: request_sp will store the SocketPair4
+int TCPListener::parse(char *buff)
+{
+    char *tmp;
+    struct in_addr saddr;
+    struct in_addr daddr;
+    unsigned short sport;
+    unsigned short dport;
+    IPv4Address* src;
+    IPv4Address* dst;
+   
+    request_sp = NULL;
+    
+    if ((strchr(buff, ':')) == (strrchr(buff, ':')))
+        return 0;
+    if (NULL == (strchr(buff, ' ')))
+        return 0;
+
+    // TODO: do a clever request check (regex?)
+    
+    tmp = strtok(buff, ":");
+    if (INADDR_NONE == (saddr.s_addr = inet_addr(tmp)))
+        return 0;
+
+    tmp = strtok(NULL, " ");
+    sport = atoi(tmp);
+
+    tmp = strtok(NULL, ":");
+    if (INADDR_NONE == (daddr.s_addr = inet_addr(tmp)))
+        return 0;
+    
+    tmp = strtok(NULL, "\n");
+    dport = atoi(tmp);
+
+    src = new IPv4Address(saddr);
+    dst = new IPv4Address(daddr);
+    request_sp = new SocketPair4(*src, sport, *dst, dport);
+    delete src;
+    delete dst;
+
+    return 1;
+}
+
+void TCPListener::listener_serv(char *buffer)
+{
+        unsigned short int packets = 0;
+        unsigned short int state   = 0;
+        unsigned short int idle    = 0;
+
+        if (!parse(buffer)) {
+            send(conn, "-1 -1 -1\n", strlen("-1 -1 -1\n"), 0);
+            return;
+        }
+
+        if (!request_sp) {
+            send(conn, "-1 -1 -1\n", strlen("-1 -1 -1\n"), 0);
+            return;
+        }
+
+        container->lock();
+        iter = container->getSortedIteratorPtr();
+
+        SortedIterator *i = iter;
+        i->rewind();
+
+        while ( TCPConnection *ic = i->getNext() ) {
+
+            SocketPair4 *sp;
+
+            sp = new SocketPair4 ( ic->srcAddr(), ic->srcPort(),
+                                   ic->dstAddr(), ic->dstPort());
+
+            if (*request_sp == *sp) {
+                packets = ic->getPacketCount();
+                state   = ic->getState();
+                idle    = ic->getIdleSeconds();
+                delete sp;
+                break;
+            }
+
+            delete sp;
+        }
+
+        char *msg;
+        msg = (char *) malloc(sizeof(char) * 20);
+        sprintf(msg, "%d %d %d\n", packets, state, idle);
+        send(conn, msg, strlen(msg), 0);
+        free(msg);
+        
+        delete request_sp;
+        request_sp = NULL;
+        delete iter;
+        iter = NULL;
+        container->unlock();
+}
+
+void TCPListener::listener_run()
+{
+    // create socket
+    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 1)
+        throw GenericError("socket() returned an error.");
+
+    // server address
+    address.sin_family = AF_INET;
+    address.sin_addr.s_addr = htonl(INADDR_LOOPBACK);
+    address.sin_port = htons(port);
+
+    if (bind(sock, (struct sockaddr *) &address, sizeof(address)) != 0)
+        throw GenericError("bind() returned an error.");
+
+    // listen connection
+    listen(sock, 10);
+    addrlen = sizeof(struct sockaddr_in);
+
+    for (;;)
+    {
+        if ((conn = accept(sock, (struct sockaddr *) &address, &addrlen)) < 1)
+            throw GenericError("accept() returned an error.");
+
+        char *buffer  = (char *) malloc(sizeof(char) * BUFSIZE);
+        recv(conn, buffer, BUFSIZE, 0);
+        listener_serv(buffer);
+        free(buffer);
+        close(conn);
+    }
+
+    // never reached..
+    close(sock);
+}
+
+void *listener_thread_func( void *arg )
+{
+    TCPListener *l = (TCPListener *) arg;
+    l->listener_run();
+    return NULL;
+}
+
diff -Naur tcptrack-1.1.4/src/TCPListener.h tcptrack-1.1.4-ossim/src/TCPListener.h
--- tcptrack-1.1.4/src/TCPListener.h	1970-01-01 01:00:00.000000000 +0100
+++ tcptrack-1.1.4-ossim/src/TCPListener.h	2004-12-21 13:45:53.000000000 +0100
@@ -0,0 +1,71 @@
+/* 
+ *  Ths code in this file is part of tcptrack. For more information see
+ *    http://www.rhythm.cx/~steve/devel/tcptrack
+ *
+ *     Copyright (C) Steve Benson - 2003
+ *
+ *  tcptrack is free software; you can redistribute it and/or modify it
+ *  under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your
+ *  option) any later version.
+ *   
+ *  tcptrack is distributed in the hope that it will be useful, but
+ *  WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  General Public License for more details.
+ *   
+ *  You should have received a copy of the GNU General Public License
+ *  along with GNU Make; see the file COPYING.  If not, write to
+ *  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA. 
+ *  
+ */
+#ifndef TCPLISTENER_H
+#define TCPLISTENER_H 1
+
+#include <pthread.h>
+#include "TCContainer.h"
+
+#define BUFSIZE 1024
+
+class TCPListener
+{
+public:
+    TCPListener( TCContainer *, int );
+    ~TCPListener();
+
+    void init(); // like a constructor, but exceptions can be thrown.
+    void stop();
+
+
+    // do not call. used as pthread_create callback.
+    void listener_run();
+
+private:
+
+    // display packets in here.
+    TCContainer *container;
+
+    // an iterator over connections in the container.
+    SortedIterator * iter;
+
+    // request socket pair
+    SocketPair4 *request_sp;
+
+    // port listening connections
+    int port;
+    
+    pthread_t listener_tid;
+
+    int         sock;
+    int         conn;
+    struct      sockaddr_in  address;
+    socklen_t   addrlen;
+    
+    void listener_serv(char *buffer);
+    int parse(char *buff);
+};
+
+void *listener_thread_func( void * );
+
+#endif
+
diff -Naur tcptrack-1.1.4/src/TCPTrack.cc tcptrack-1.1.4-ossim/src/TCPTrack.cc
--- tcptrack-1.1.4/src/TCPTrack.cc	2004-10-06 01:29:00.000000000 +0200
+++ tcptrack-1.1.4-ossim/src/TCPTrack.cc	2004-12-21 15:25:07.000000000 +0100
@@ -1,6 +1,7 @@
 #include <cassert>
 #include <pthread.h>
 #include <iostream>
+#include <unistd.h>
 #include "TCPTrack.h"
 #include "AppError.h"
 #include "PcapError.h"
@@ -33,7 +34,11 @@
 	c = new TCContainer();
 	pb = new PacketBuffer();
 	s = new Sniffer();
-	ui = new TextUI(c);
+	l = new TCPListener(c, cf.port);
+	if (cf.daemon == false)
+		ui = new TextUI(c);
+	else if (daemon(0, 0))
+		throw GenericError("daemon() returned an error.");
 
 	try 
 	{
@@ -42,7 +47,9 @@
 		
 		// init() on these objects performs constructor-like actions,
 		// only they may throw exceptions. Constructors don't.
-		ui->init();
+		l->init();
+		if (cf.daemon == false)
+			ui->init();
 		s->init(cf.iface,cf.fexp);
 		pb->init();
 
@@ -62,7 +69,9 @@
 			throw GenericError(ferr);
 	
 		// shut everything down cleanly.
-		ui->stop();
+		l->stop();
+		if (cf.daemon == false)
+			ui->stop();
 		s->dest();
 		pb->dest();
 		c->stop();
@@ -77,7 +86,9 @@
 		s->dest();
 		pb->dest();
 		
-		delete ui;
+		if (cf.daemon == false)
+			delete ui;
+		delete l;
 		delete s;
 		delete pb;
 		delete c;
@@ -118,7 +129,7 @@
 
 void printusage(int argc,char **argv)
 {
-	printf("Usage: %s [-dfhvp] [-r <seconds>] -i <interface> [<filter expression>]\n",argv[0]);
+	printf("Usage: %s [-dDfhvp] [-r <seconds>] [-P <port>] -i <interface> [<filter expression>]\n",argv[0]);
 }
 
 struct config parseopts(int argc, char **argv)
@@ -132,9 +143,11 @@
 	cf.fastmode=false;
 	cf.promisc=true;
 	cf.detect=true;
+	cf.port=40010;
+	cf.daemon=false;
 	bool got_iface=false;
 
-	while( (o=getopt(argc,argv,"dhvfi:pr:")) > 0 )
+	while( (o=getopt(argc,argv,"dDhvfi:pP:r:")) > 0 )
 	{
 		if( o=='h' )
 		{
@@ -159,6 +172,10 @@
 			cf.detect=false;
 		if( o=='p' ) 
 			cf.promisc=false;
+		if ( o=='P' )
+			cf.port = atoi(optarg);
+		if ( o=='D' )
+			cf.daemon = true;
 	}
 	
 	if( ! got_iface ) {
diff -Naur tcptrack-1.1.4/src/TCPTrack.h tcptrack-1.1.4-ossim/src/TCPTrack.h
--- tcptrack-1.1.4/src/TCPTrack.h	2004-10-06 01:29:00.000000000 +0200
+++ tcptrack-1.1.4-ossim/src/TCPTrack.h	2004-12-20 10:06:27.000000000 +0100
@@ -8,6 +8,7 @@
 #include "TextUI.h"
 #include "PacketBuffer.h"
 #include "TCContainer.h"
+#include "TCPListener.h"
 
 using namespace std;
 
@@ -33,6 +34,7 @@
 	TextUI *ui;
 	PacketBuffer *pb;
 	TCContainer *c;
+	TCPListener *l;
 	
 	string ferr; // fatal error message sent from another thread
 	pthread_mutex_t ferr_lock;
diff -Naur tcptrack-1.1.4/src/util.h tcptrack-1.1.4-ossim/src/util.h
--- tcptrack-1.1.4/src/util.h	2004-10-06 01:29:00.000000000 +0200
+++ tcptrack-1.1.4-ossim/src/util.h	2004-12-21 15:26:51.000000000 +0100
@@ -51,6 +51,8 @@
 	bool fastmode; // faster average recalculation (more than once/sec).
 	bool detect; // detect pre-existing connections?
         bool promisc; // enable promisc mode?	        
+	int port;
+	bool daemon;
 };
 
 struct avgstat
