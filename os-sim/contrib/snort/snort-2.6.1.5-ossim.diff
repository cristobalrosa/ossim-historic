diff -ruN snort-2.6.1.5.orig/src/output-plugins/spo_database.c snort-2.6.1.5/src/output-plugins/spo_database.c
--- snort-2.6.1.5.orig/src/output-plugins/spo_database.c	2007-03-14 17:51:01.000000000 +0100
+++ snort-2.6.1.5/src/output-plugins/spo_database.c	2007-07-05 14:06:38.000000000 +0200
@@ -178,6 +178,8 @@
     DBINT       ms_col;
 #endif
     char *args;
+ 	char *logfile;
+	FILE *file;	
 } DatabaseData;
 
 /* list for lookup of shared data information */
@@ -215,7 +217,7 @@
 #define KEYWORD_IGNOREBPF_ZERO "0"
 #define KEYWORD_IGNOREBPF_YES  "yes"
 #define KEYWORD_IGNOREBPF_ONE  "1"
-
+#define KEYWORD_LOGFILE      "logfile"
 
 #define LATEST_DB_SCHEMA_VERSION 107
 
@@ -335,6 +337,7 @@
     char * escapedSensorName = NULL;
     char * escapedInterfaceName = NULL;
     char * escapedBPFFilter = NULL;
+	char * filename = NULL;
     int ret, bad_query = 0;
 
     if (!data)
@@ -343,6 +346,14 @@
     }
 
     ParseDatabaseArgs(data);
+	
+	/* File log */
+    if (data->logfile != NULL)
+     {
+         filename = ProcessFileOption(data->logfile);
+         data->file = OpenAlertFile(filename);
+         free(filename);
+     }
 
     /* find a unique name for sensor if one was not supplied as an option */
     if(!data->sensor_name)
@@ -766,6 +777,9 @@
     data->encoding = ENCODING_HEX;
     data->detail = DETAIL_FULL;
     data->ignore_bpf = 0;
+	data->logfile = NULL;
+	data->file = NULL;
+	
 
     facility = strtok(data->args, ", ");
     if(facility != NULL)
@@ -824,6 +838,7 @@
     if(!strncasecmp(type,KEYWORD_MSSQL,strlen(KEYWORD_MSSQL)))
         data->shared->dbtype_id = DB_MSSQL; 
 #endif
+    
 
     if( !pv.quiet_flag ) printf(")\n");
 
@@ -948,6 +963,11 @@
 
             if( !pv.quiet_flag ) printf("database: ignore_bpf = %s\n", a1);
         }
+	if(!strncasecmp(dbarg,KEYWORD_LOGFILE,strlen(KEYWORD_LOGFILE)))
+    	{
+		data->logfile = a1;
+		if( !pv.quiet_flag ) printf("database:            logfile = %s\n", data->logfile);
+    	}
         dbarg = strtok(NULL, "=");
     } 
 
@@ -1003,6 +1023,71 @@
     return rval;
 }  
 
+ void DatabaseLog(DatabaseData *data, char *msg,  Packet *p, Event *event){
+     char timestamp[TIMEBUF_SIZE];
+     bzero((char *) timestamp, TIMEBUF_SIZE);
+     ts_print(p == NULL ? NULL : (struct timeval *) & p->pkth->ts, timestamp);+                                                                                                                             
+     fwrite(timestamp, strlen(timestamp), 1, data->file);                                                                    
+ 
+     if (msg != NULL)
+     {
+         fwrite(" [**] ", 6, 1, data->file);
+ 
+         fprintf(data->file, "[%lu:%lu:%lu] ",
+                 (unsigned long) event->sig_generator,
+                 (unsigned long) event->sig_id,
+                 (unsigned long) event->sig_rev);
+ 
+         fprintf(data->file, "<%s> ", PRINT_INTERFACE(pv.interface));
+       fwrite(msg, strlen(msg), 1, data->file);
+ 
+         fwrite(" [**] ", 6, 1, data->file);
+     }
+ 
+     if(p && p->iph)
+     {
+        fprintf(data->file, "{%s} ", protocol_names[p->iph->ip_proto]);
+ 
+         if(p->frag_flag)
+         {
+             /* just print the straight IP header */
+             fputs(inet_ntoa(p->iph->ip_src), data->file);
+             fwrite(" -> ", 4, 1, data->file);
+             fputs(inet_ntoa(p->iph->ip_dst), data->file);
+         }
+         else
+         {
+             switch(p->iph->ip_proto)
+             {
+                 case IPPROTO_UDP:
+                 case IPPROTO_TCP:
+                     /* print the header complete with port information */
+                     fputs(inet_ntoa(p->iph->ip_src), data->file);
+                     fprintf(data->file, ":%d -> ", p->sp);
+                     fputs(inet_ntoa(p->iph->ip_dst), data->file);
+                     fprintf(data->file, ":%d", p->dp);
+                     break;
+                 case IPPROTO_ICMP:
+                 default:
+                     /* just print the straight IP header */
+                     fputs(inet_ntoa(p->iph->ip_src), data->file);
+                     fwrite(" -> ", 4, 1, data->file);
+                     fputs(inet_ntoa(p->iph->ip_dst), data->file);
+             }
+         }
+     }               /* end of if (p) */
+ 
+     fprintf(data->file, " [%lu:%lu]",
+             (unsigned long) data->shared->sid,
+             (unsigned long) data->shared->cid);
+ 
+     fputc('\n', data->file);
+                                                                                                                             
+     fflush(data->file);
+     return;
+}
+ 
+
 /*******************************************************************************
  * Function: Database(Packet *, char * msg, void *arg)
  *
@@ -2007,6 +2092,8 @@
     }
     FreeQueryNode(root); 
     root = NULL;
+	if (data->file!=NULL)
+		DatabaseLog(data,msg,p,event);
 
     /* Increment the cid*/
     data->shared->cid++;
@@ -3220,7 +3307,7 @@
 
     puts(" ignore_bpf - specify if you want to ignore the BPF part for a sensor\n");
     puts("              definition (yes or no, no is default)\n");
-
+	puts(" logfile - file for log alerts with sid and cid values\n");
     puts(" FOR EXAMPLE:");
     puts(" The configuration I am currently using is MySQL with the database");
     puts(" name of \"snort\". The user \"snortusr@localhost\" has INSERT and SELECT");
@@ -3239,7 +3326,9 @@
     if(data != NULL) 
     {
        UpdateLastCid(data, data->shared->sid, data->shared->cid-1);
-       Disconnect(data); 
+       Disconnect(data);
+	   if (data->file != NULL)
+			fclose(data->file);  
        free(data->args);
        free(data);
        data = NULL;
