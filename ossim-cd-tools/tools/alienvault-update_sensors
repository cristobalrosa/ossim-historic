#!/usr/bin/env perl

use v5.10.1;
use strict;
use warnings;
#use diagnostics;

use lib '/usr/share/alienvault-center/lib';

use File::Basename;

use AV::Log;
use AV::ConfigParser;

my $program_name = basename $0;
my $script_msg
    = "# Automatically generated by $program_name script. DO NOT MODIFY!";

my %config = AV::ConfigParser::current_config();

my $munin_conf_file                 = '/etc/munin/munin.conf';
my $munin_conf_include_file         = '/etc/munin/munin.conf.include';
my $munin_conf_include_file_example = <<'EOF';
# Munin configuration include file for AlienVault's OSSIM
#
# Manually introduce hosts here, following same syntax as /etc/munin/munin.conf
# Hosts will be included in the main munin configuration by a cron job running
# alienvault-update_sensors
#
# Please make sure no duplicates are found in /etc/munin/munin.conf
# IMPORTANT: Always use lowercase for hostnames
#
# Also make sure you add the propper firewall rule so that the sensors can talk
# to the framework on port tcp/4949
#
# Example entry:
# [hostname.domainname]
#          address 192.168.0.1
#          use_node_name yes
#
EOF

verbose_log("Nothing to do - $munin_conf_file not found") and exit 0
    unless -f $munin_conf_file;

verbose_log('Configuring munin');

#Include FrameWork
my $framework_ip = $config{'framework_ip'};

# Munin must work with lowercase hostnames
chomp( my $system_framework_name
        = lc
        qx(cat /etc/hosts | grep $framework_ip | awk '{print \$2}' | head -1)
);
$system_framework_name
    ||= $framework_ip;    # If framework name is empty, use the IP address

open my $munin_framework_conf_fh, q{>}, $munin_conf_file
    or die "Error opening file $!";
print {$munin_framework_conf_fh} <<"EOF";
$script_msg
# Please use /etc/munin/munin.conf.include to add your own hosts
#
# All hostnames must be entered in lowercase

dbdir   /var/lib/munin
htmldir /var/www/munin
logdir  /var/log/munin
rundir  /var/run/munin
tmpldir /etc/munin/templates

# Framework: $system_framework_name
[$system_framework_name]
	address $framework_ip
	use_node_name yes

EOF

#Include DataBase
my $database_ip = $config{'database_ip'};

# Allinone profiles should not repeat components
if ( $framework_ip ne $database_ip ) {
    if (   ( $database_ip ne '127.0.0.1' )
        && ( $database_ip ne $framework_ip ) )
    {
        print {$munin_framework_conf_fh} <<EOF;
# Database: $database_ip
[$database_ip]
	address $database_ip
	use_node_name yes

EOF
    }
}

# Include known sensors
my @sensor_db
    = qx( echo 'SELECT name,INET6_NTOP(ip) FROM sensor;' | ossim-db | tail -n +2 );

# the call to tail takes care the header
# See https://en.wikipedia.org/wiki/Tail_(Unix) for an explanation
for my $sensor_data (@sensor_db) {
    chomp $sensor_data;
    my ( $sensor_name, $sensor_ip ) = split /\s+/, $sensor_data;
    $sensor_name
        = lc $sensor_name;   # Munin internally works with lowercase hostnames
    $sensor_name ||= $sensor_ip; # If sensor name is empty, use the IP address

    # All-in-one profiles should not repeat components
    if ( ( $framework_ip ne $sensor_ip ) && ( $database_ip ne $sensor_ip ) ) {
        say {$munin_framework_conf_fh} <<EOF;
# Sensor: $sensor_name
[$sensor_name]
	address $sensor_ip
	use_node_name yes
EOF
    }
}
print {$munin_framework_conf_fh} <<'EOF';
# End of automated configuration by ossim-reconfig
EOF
close $munin_framework_conf_fh;

# Import include file for munin
# If empty or not there, create an example file.
if ( ( !-e $munin_conf_include_file ) || ( -z $munin_conf_include_file ) ) {
    open my $munin_conf_include_file_fh, q{>}, $munin_conf_include_file
        or die "Error opening file $!";
    print {$munin_conf_include_file_fh} $munin_conf_include_file_example;
    close $munin_conf_include_file_fh;
}
else {
    my $command = "grep -v ^# $munin_conf_include_file >> $munin_conf_file";
    debug_log($command);
    system $command;
}

# Munin node is not modified by --update_sensors, no need to restart it.

exit 0;
