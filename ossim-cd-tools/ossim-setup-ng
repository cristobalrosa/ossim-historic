#!/usr/bin/perl 
# Jose Miguel de la Casa
# jdelacasa@alievault.com
BEGIN {	push @INC,"/usr/share/alienvault-center/lib"; }



use Avconfigd;
use AV::CC::Util;
use AV::ConfigParser;
use AV::Log;
use Config::Tiny;
use DBI;


my $VER = "0.0.1 release 1";
my $config_file="/etc/ossim/ossim_setup.conf";
my %profile;
my @option;
my %config = AV::ConfigParser::current_config;
#my %config;
my %newconf;
my %remote_component;
my %group;
my $config_group = "";
my $mtcmp;
my $display;
my $dbinary;

my $ipt_activ=0;

# check for system uuid
	my $systemuuid;
	if ( -f "/usr/sbin/dmidecode" ){
	
		$systemuuid = `/usr/sbin/dmidecode | grep UUID | awk '{print \$2}'`;$systemuuid =~ s/\n//g;
	
	}else{
		$systemuuid = `cat /etc/hostname`; $systemuuid =~ s/\n//g;
	}




sub display_type(){
 

	if (( exists $ENV{DISPLAY} )) { 
		$dbinary="/usr/bin/Xdialog"; 
	}else{
		$dbinary="/usr/bin/dialog"; 
	}

	$dbinary="/usr/bin/dialog";

}



sub read_profile(){

	if ($config{'profile'} eq "all-in-one"){
		@profiles_arr = ("Server","Database","Framework","sensor");
	}else{
		@profiles_arr = split( /,\s*/,     $config{'profile'} );	
	}
	foreach my $prof (@profiles_arr){

		given($prof){
			when ( m/Server/ ) { $profile{'server'}="1"; }
			when ( m/Database/ ) { $profile{'database'}="1"; }
			when ( m/Framework/ ) { $profile{'framework'}="1"; }
			when ( m/Sensor/ ) { $profile{'sensor'}="1"; }
		}	
	}
}

sub firewall_status(){

	my @ipt=`iptables -L -n -v`;

	#my $fwmsg;
	foreach $iptserv (@ipt) {
		if ( $iptserv =~ m/REJECT/ ){
			$ipt_activ=1;	}
	}


}
sub get_database(){
	my %config = AV::ConfigParser::current_config;
	my $avcenter_db = "avcenter";
    console_log("Checking DB avcenter");

	if ( $config{'database_ip'} eq $debconf{'iplocal'} ){
		$config{'database_ip'} = "localhost";
	}

    my $conn = "";
    
   
    $dsn = "dbi:". $config{'database_type'}.":$avcenter_db:" . $config{'database_ip'} . ":" . $config{'database_port'} . ":";
	
 	debug_log("Database conection: 1st -- Use $dsn,user : $config{'database_user'}, pass : xxxxxxxxxx");
    $conn = DBI->connect( $dsn, $config{'database_user'}, $config{'database_pass'} );
	if ( !$conn ) {
        console_log("Error: Unable to connect to AVCENTER DB with config file settings, trying old settings");
       
        $dsn = "dbi:"
          . $config_last{'database_type'} . ":avcenter:"
          . $config_last{'database_ip'} . ":"
          . $config_last{'database_port'} . ":";


		debug_log("Database Profile: 2st -- $dsn, user: $config_last{'database_user'}, pass : xxxxxxxxxx");
					
   	    $conn = DBI->connect( $dsn,$config_last{'database_user'},$config_last{'database_pass'});
   
   
		if ( !$conn ) {	console_log("Can't connect to Database avcenter"); exit 0 ;}	
   
   
   
   
   
   }else{
		console_log("conection success")
	   
  }
   
   return $conn;
	
}


## menus


sub main_menu_framework(){

	my $BACKTITLE=" \"Alienvault Siem Setup :: Actual profile/s @profiles_arr :: Version: $config{'version'}\"";
	my $TITLE="Alienvault Setup :: Init Menu (Framework profile)";
	my $WELCOME="Welcome to Alienvault Center configurator!\n\n";
	my $BODY="$WELCOME Select one of the following actions";

	my $myintr;
	my $opt=1;

	push(@option,"\"$opt\" \"Select remote system to configure (all system)\""); $opt++; 
	##push(@option,"\"$opt\" \"Select remote system to configure (by group)\""); $opt++; 
	push(@option,"\"$opt\" \"Configure this system (localhost)\""); $opt++;
	
    my($dlg) = "$dbinary --stdout --title \"$TITLE\" --backtitle $BACKTITLE --menu \"$BODY\" 18 70 12  @option ";
	
     my($rslt) = qx{ $dlg };
     my($status) = $? >> 8;

	undef @option;
	if ( $status == 0){
		return $rslt;
	}else{
		exit 0;
	}
	

}




sub initial_menu_config_group(){
	


	my $BACKTITLE=" \"OSSIM Setup :: Actual profile/s @profiles_arr :: Version: $config{'version'}\"";
	my $TITLE="OSSIM Setup :: Main Menu";
	my $WELCOME="Welcome to OSSIM Setup!\n\n";
	my $BODY="$WELCOME Select one of the following actions";
	
	my $myintr;
	my $opt=1;


	
    my $systemuuid = `/usr/sbin/dmidecode | grep UUID | awk '{print \$2}'`;$systemuuid =~ s/\n//g;
	$conn = get_database();
    
					my $query = "select distinct config_group from current_local  order by config_group ;";
					
					my $sth   = $conn->prepare($query);
					$sth->execute();
					#my @siem_component_total = $sth->fetchrow_array();
					
					while(($grp ) = $sth->fetchrow_array) {
							$group{"$opt"} = $grp;
							push(@option,"\"$opt\" \"$grp\""); $opt++; 
						    
															
						
					}
	
    
	

		
	
#	push(@option,"\"$opt\" \"Save & Exit\""); $opt++;



    my($dlg) = "$dbinary --stdout --title \"$TITLE\" --backtitle $BACKTITLE --menu \"$BODY\" 18 70 12  @option ";
	
     my($rslt) = qx{ $dlg };
     my($status) = $? >> 8;

	undef @option;
	if ( $status == 0){
		$config_group = $group{$rslt};
		return $rslt;
	}else{
		exit 0;
	}
	
	
	
	
}

sub initial_menu(){
	
	
	my $BACKTITLE=" \"Alienvault Siem Setup :: Actual profile/s @profiles_arr :: Version: $config{'version'}\"";
	my $TITLE="Alienvault Setup :: Init Menu (Framework profile)";
	my $WELCOME="Welcome to Alienvault Center configurator!\n\n";
	my $BODY="$WELCOME Select one of the following actions";

	my $myintr;
	my $opt=1;


	
    my $systemuuid = `/usr/sbin/dmidecode | grep UUID | awk '{print \$2}'`;$systemuuid =~ s/\n//g;
	$conn = get_database();
    
					my $query = "select hostname,admin_ip,uuid from current_local  order by hostname ;";
			
					my $sth   = $conn->prepare($query);
					$sth->execute();
					#my @siem_component_total = $sth->fetchrow_array();
					
					while(($hostname_query,$ip_query,$uuid_query ) = $sth->fetchrow_array) {
						
						if ( $systemuuid eq $uuid_query) {
							$remote_component{"$opt"} = $uuid_query;
							push(@option,"\"$opt\" \"LOCALHOST : $hostname_query : $ip_query : $uuid_query\""); $opt++; 
						    
						}else {
							$remote_component{"$opt"} = $uuid_query;
							push(@option,"\"$opt\" \"$hostname_query : $ip_query : $uuid_query\""); $opt++; 
							
						}
										
						
					}
	
    
	
    my($dlg) = "$dbinary --stdout --title \"$TITLE\" --backtitle $BACKTITLE --menu \"$BODY\" 18 70 12  @option ";
	
     my($rslt) = qx{ $dlg };
     my($status) = $? >> 8;

	undef @option;
	if ( $status == 0){
		$mtcmp = $remote_component{$rslt};
		return $rslt;
	}else{
		exit 0;
	}
	
	
	
	
}


sub remote_system_info(){

			$conn = get_database();
    
					my $query = "select hostname,admin_ip,interface,uuid,profile,firewall_active,snmpd,snmptrap,vpn_infraestructure,firewall_active,
					sensor_tzone,sensor_networks,sensor_interfaces,netflow,netflow_remote_collector_port,
					rservers,
					framework_https,framework_https_cert,framework_https_key
					 from current_local where uuid = \"$mtcmp\"  order by hostname ;";
					
					my $sth   = $conn->prepare($query);
					$sth->execute();
					
					my $msgboxtmp;
					while(($hostname_query,$ip_query,$interface_query,$uuid_query,$p_query,$f_query,$smp_query,$snmptrap_query,$vpn_query,$firewall_active_query,
					$sensor_tzone_query,$sensor_networks_query,$sensor_interfaces_query,$netflow_query,$netflow_remote_collector_port,
					$rservers_query,
					$f_https_query, $f_https_cert_query, $f_https_key_query
					 ) = $sth->fetchrow_array) {
						 
						 my @first_status_up = `echo "ds" | telnet $ip_query 40007 2>&1`;
						 my $current_status_remote = "DOWN";
						 if (map (/^Connection closed by foreign host./,@first_status_up)){
							 
							 my @second_status_up = `alienvault-center-collector --server=$uuid_query --status`;
							 $current_status_remote = "UP" if (map (/^UP/,@second_status_up));
							 
							 
						 }
						 
						$msgboxtmp = 
						"\n
				General Properties\t\t\t STATUS: $current_status_remote\n
						 Profiles: $p_query 
						 Hostname: $hostname_query
						 Admin Interface : $interface_query
						 Admin ip: $ip_query 
						 UUID	 : $uuid_query
						 Snmp Enable : $smp_query 			
						 SnmpTrap Enable : $snmptrap_query 
						 VPN : $vpn_query 
						 Firewall Enable : $firewall_active_query
						 ";
						
						my @profiles_arr;
						if ($p_query eq "all-in-one"){
								@profiles_arr = ("Server","Database","Framework","sensor");
						}else{
								@profiles_arr = split( /,\s*/, $p_query );	
						}
						
						$profile{'server'}="0";
						$profile{'database'}="0";
						$profile{'framework'}="0";
						$profile{'sensor'}="0";
						foreach my $prof (@profiles_arr){
							given($prof){
								when ( m/Server/ ) { $profile{'server'}="1"; }
								when ( m/Database/ ) { $profile{'database'}="1"; }
								when ( m/Framework/ ) { $profile{'framework'}="1"; }
								when ( m/Sensor/ ) { $profile{'sensor'}="1"; }
							}
						}
					
				
					   # if sensor profile
					   
					   if ( $profile{'sensor'} == 1 ){
						   $msgboxtmp = $msgboxtmp . 
					    "
				Sensor Properties\n
						Time Zone: $sensor_tzone_query
						Interfaces: $sensor_interfaces_query
						Network  : $sensor_networks_query
						Netflow Enable : $netflow_query
						Netflow remote collector port : $netflow_remote_collector_port 
						";
						   
					   }
				
					   # if server profile
					   
					   if ( $profile{'server'} == 1 ){
						   $msgboxtmp = $msgboxtmp . 
					    "
				Server Properties\n
						Rservers: $rservers_query
						";
						   
					   }
					   
					   # if framework profile
					   
					   if ( $profile{'framework'} == 1 ){
						   if ( $f_https_cert_query eq "" ) { $f_https_cert_query_f = "Auto generated"; }else{$f_https_cert_query_f = $f_https_cert_query; }
						   if ( $f_https_key_query eq "" ) { $f_https_key_query_f = "Auto generated"; }else{$f_https_key_query_f = $f_https_key_query; }
						   $msgboxtmp = $msgboxtmp . 
					    "
				Framework Properties\n
						Https Enable : $f_https_query
						Https Cert : $f_https_cert_query_f
						Https Key : $f_https_key_query_f
						";
						   
					   }
				
				
					
						
				} #while end
					
					
					
				system("$dbinary --title \"$mtcmp  \" --msgbox \"$msgboxtmp\" 30 90 ");
				#exit 0;	
	
}






















sub main_menu(){

	my $BACKTITLE=" \"Alienvault Setup :: Actual profile/s @profiles_arr :: Version: $config{'version'}\"";
	my $TITLE="Alienvault Setup :: General Configuration";
	my $WELCOME="Welcome to Alienvault Setup!\n\n";
	my $BODY="$WELCOME Select one of the following actions";

	my $myintr;
	my $opt=1;

	push(@option,"\"$opt\" \"Change system profile\""); $opt++; 
	push(@option,"\"$opt\" \"Network Configuration\""); $opt++;
	push(@option,"\"$opt\" \"System update\""); $opt++;
	push(@option,"\"$opt\" \"Backup system\""); $opt++;
	push(@option,"\"$opt\" \"Troubleshooting\""); $opt++; 

	
	 if ( $sensor_profile == 1 ) {push(@option,"\"$opt\" \"Sensor\""); $opt++; }
	 if ( $server_profile == 1 ) {push(@option,"\"$opt\" \"SIEM\""); $opt++;  }
	 if ( $logger_profile == 1 ) {push(@option,"\"$opt\" \"Logger\""); $opt++; }
	 if ( $database_profile == 1 ) {push(@option,"\"$opt\" \"Database\""); $opt++; }
	 if ( $framework_profile == 1 ) {push(@option,"\"$opt\" \"Web Interface\""); $opt++;  }

    my($dlg) = "$dbinary --stdout --title \"$TITLE\" --backtitle $BACKTITLE --menu \"$BODY\" 18 70 12  @option ";
	
     my($rslt) = qx{ $dlg };
     my($status) = $? >> 8;

	undef @option;
	if ( $status == 0){
		return $rslt;
	}else{
		exit 0;
	}
	

}

sub server_setting(){
	my $BACKTITLE=" \"OSSIM Setup :: Actual profile/s @profiles_arr :: Version: $config{'version'}\"";
	my $TITLE="OSSIM Setup :: Change Server Settings";
	my $BODY="You can change the following information:";

	push(@option,"\"Get\" \"key license for server pro\""); $opt++;
	push(@option,"\"Set\" \"key license for server pro\""); $opt++;

	my($dlg) = "$dbinary --stdout --title \"$TITLE\" --backtitle $BACKTITLE --menu \"$BODY\" 18 70 12  @option ";
     	my($rslt) = qx{ $dlg };
     	my($status) = $? >> 8;

	undef @option;
	if ( $status == 0){
		return $rslt;
	}else{
		return;
	}


}

sub server_setting_get(){
	my $BACKTITLE=" \"OSSIM Setup :: Actual profile/s @profiles_arr :: Version: $config{'version'}\"";
	my $TITLE="OSSIM Setup :: Get license for server pro";
	my $BODY="";


	if ( $config{'server_pro'} ne "yes"){
				   		system ("$dbinary --msgbox \"Not license.\" 10 30");
						return;
				   }


	if ( $config{'server_license'} eq ""){
				   		system ("$dbinary --msgbox \"Not license.\" 10 30");
						return;
				   }
	



	my($dlg) = "$dbinary --stdout --title \"$TITLE\" --backtitle $BACKTITLE --msgbox \"\n\nLicense Key:\n\n\n$config{'server_license'}\" 18 70 ";
     	my($rslt) = qx{ $dlg };
     	my($status) = $? >> 8;

	undef @option;
	if ( $status == 0){
		return $rslt;
	}else{
		exit 0;
	}
	
	
}


sub server_setting_set(){
	
	
	my $BACKTITLE=" \"OSSIM Setup :: Actual profile/s @profiles_arr :: Version: $config{'version'}\"";
	my $TITLE="OSSIM Setup :: Set server license";
	my $BODY="Insert license key:";


	
	my($dlg) = "$dbinary --stdout --title \"$TITLE\" --backtitle $BACKTITLE --inputbox \"$BODY\" 18 70  \"$config{'server_license'}\" ";
     	my($rslt) = qx{ $dlg };
     	my($status) = $? >> 8;

	undef @option;
	if ( $status == 0){
		$newconf{'server_license'} = $rslt;
		return $rslt;
	}else{
		return;
	}
	
		
	
	
	
}

sub snmp_settings(){

  while ( True ){
	my $BACKTITLE=" \"OSSIM Setup :: Actual profile/s @profiles_arr :: Version: $config{'version'}\"";
	my $TITLE="OSSIM Setup :: Snmp daemon settings";
	my $BODY="You can change the following information:";

	
	my $opt=1;
	push(@option,"\"Snmp\" \"listen daemon? ( $newconf{'snmpd'} )\""); $opt++;
	push(@option,"\"Snmptrap\" \"listen daemon ( $newconf{'snmptrap'} )\""); $opt++;	
	push(@option,"\"Comunity\" \"( $newconf{'snmp_comunity'} )\""); $opt++;	

	my($dlg) = "$dbinary --stdout --title \"$TITLE\" --backtitle $BACKTITLE --menu \"$BODY\" 18 70 12  @option ";
     	my($rslt) = qx{ $dlg };
     	my($status) = $? >> 8;


	undef @option;

	if ( $status == 0){
		if( $rslt eq "Snmp" ){ if ( $newconf{'snmpd'} eq "yes" ) { $newconf{'snmpd'} = "no"; }else{ $newconf{'snmpd'} = "yes"; } }
		if( $rslt eq "Snmptrap" ){ if ( $newconf{'snmptrap'} eq "yes" ) { $newconf{'snmptrap'} = "no"; }else{ $newconf{'snmptrap'} = "yes"; } }
		if( $rslt eq "Comunity" ){  }
		#return $rslt;
		
	}else{
		exit 0;
	}

   }
}

## General setting
sub general_setting(){

	my $BACKTITLE=" \"OSSIM Setup :: Actual profile/s @profiles_arr :: Version: $config{'version'}\"";
	my $TITLE="OSSIM Setup :: Change General Setting";
	my $BODY="You can change the following information:";

	my $opt=1;
	

	push(@option,"\"$opt\" \"Choose the default network interface (current: $config{'interface'})\""); $opt++ ;
	push(@option,"\"$opt\" \"Change timezone\""); $opt++;
	push(@option,"\"$opt\" \"Change hostname (current: $config{'hostname'})\""); $opt++;
	push(@option,"\"$opt\" \"Update OSSIM system (recommended)\""); $opt++;
#	push(@option,"\"$opt\" \"Change/add profile\""); $opt++;
#	push(@option,"\"$opt\" \"Configure SNMP daemon\""); $opt++;
	push(@option,"\"$opt\" \"Configure email notification\""); $opt++;
	push(@option,"\"$opt\" \"Configure firewall\""); $opt++;

#	my @ipt=`iptables -L -n -v`;
#	my $ipt_activ=0;

	#foreach $iptserv (@ipt) {
#		if ( $iptserv =~ m/REJECT/ ){
			#$ipt_activ=1;	}
	#}
	#my $fwmsg;	
#		if ( $ipt_activ == 1 ) { $fwmsg="Stop Firewall ( Current Status: Active)"; }
#		else { $fwmsg="Start Firewall ( Current status: Inactive)"; }	
	
#		push(@option,"\"$opt\" \"$fwmsg\""); $opt++;

	

	
	
	my($dlg) = "$dbinary --stdout --title \"$TITLE\" --backtitle $BACKTITLE --menu \"$BODY\" 18 70 12  @option ";
     	my($rslt) = qx{ $dlg };
     	my($status) = $? >> 8;

	undef @option;
	if ( $status == 0){
		return $rslt;
	}else{
		return;
	}
	

}

sub change_interface(){
## newconf{'admin_interface'} 

	my $BACKTITLE=" \"OSSIM Setup :: Select Administration Interface :: Version: $config{'version'}\"";
	my $TITLE="OSSIM Setup :: Select Administration Interface";
	my $BODY="You can select the admin interface:";

	my $opt=1;
	
	foreach my $systemDevice (@systemDev){
	
	my $active_profile="off";
	
	if ( $config{'interface'} eq $systemDevice ) { $active_profile="on"; }	
		push(@option,"\"$systemDevice\" \"\" \"$active_profile\""); $opt++;
	
	}

	my($dlg) = "$dbinary --stdout --title \"$TITLE\" --backtitle $BACKTITLE --radiolist \"$BODY\" 18 70 12  @option ";
     	my($rslt) = qx{ $dlg };
     	my($status) = $? >> 8;

	undef @option;
	if ( $status == 0 ){
		$newconf{'admin_interface'} = $rslt;
		
		return $rslt;
		
	}else{
		return;
	}
}

sub change_default_language();
sub change_hostname(){
	
	
	my $BACKTITLE=" \"OSSIM Setup :: Actual profile/s @profiles_arr :: Version: $config{'version'}\"";
	my $TITLE="OSSIM Setup :: Change Hostname";
	my $BODY="You can change the hostname:";


	
	my($dlg) = "$dbinary --stdout --title \"$TITLE\" --backtitle $BACKTITLE --inputbox \"$BODY\" 18 70  \"$config{'hostname'}\" ";
     	my($rslt) = qx{ $dlg };
     	my($status) = $? >> 8;

	undef @option;
	if ( $status == 0){
		$newconf{'hostname'} = $rslt;
		return $rslt;
	}else{
		return;
	}
	
	
	
}
	# update not function
sub configure_snmp_daemon();
sub config_email_notification(){
	
my $BACKTITLE=" \"OSSIM Setup :: Actual profile/s @profiles_arr :: Version: $config{'version'}\"";
	my $TITLE="OSSIM Setup :: Configure Email Notification";
	my $BODY="You can change the following information:";


	my($dlg) = "$dbinary --stdout --title \"$TITLE\" --backtitle $BACKTITLE --inputbox \"Email:\" 18 70 \"$config{'email_notify'}\"  ";
     	my($rslt) = qx{ $dlg };
     	my($status) = $? >> 8;

	undef @option;
	if ( $status == 0){
		$newconf{'email_notify'} = $rslt;
		return $rslt;
	}else{
		return;
	}
	
	
	
}
sub config_firewall(){
	
	my $BACKTITLE=" \"OSSIM Setup :: Select firewall active :: Version: $config{'version'}\"";
	my $TITLE="OSSIM Setup :: Select firewall active";
	my $BODY="Active firewall?:";

	
	my $active_profileyes;
	my $active_profileno;
	if ( $config{'firewall_active'} eq "yes") { 
				$active_profileyes="on";
				$active_profileno="off"; 
	} else { 
				$active_profileyes="off";
				$active_profileno="on"; 
	}
					
	push(@option,"\"yes\" \"\" \"$active_profileyes\""); $opt++;
	push(@option,"\"no\" \"\" \"$active_profileno\""); $opt++;
	
	my($dlg) = "$dbinary --stdout --title \"$TITLE\" --backtitle $BACKTITLE --radiolist \"$BODY\" 18 70 12  @option ";
     	my($rslt) = qx{ $dlg };
     	my($status) = $? >> 8;

	undef @option;
	if ( $status == 0 ){
		$newconf{'firewall_active'} = $rslt;
		return $rslt;
		
	}else{
		return;
	}
	
}
	# stop firewall


## View log
sub view_log(){

	my $BACKTITLE=" \"OSSIM Setup :: Actual profile/s @profiles_arr :: Version: $config{'version'}\"";
	my $TITLE="OSSIM Setup :: Change General Setting";
	my $BODY="You can change the following information:";
	my $myintr;

	my $opt=1;

	push(@option,"\"$opt\" \"Show syslog\""); $opt++;

	push(@option,"\"$opt\" \"Show server log\""); $opt++; 
	push(@option,"\"$opt\" \"Show agent log\""); $opt++; 
	push(@option,"\"$opt\" \"Show agent error log\""); $opt++; 
	push(@option,"\"$opt\" \"Show framework log\""); $opt++; 
	push(@option,"\"$opt\" \"Show kernel log\""); $opt++; 

	my($dlg) = "$dbinary --stdout --title \"$TITLE\" --backtitle $BACKTITLE --menu \"$BODY\" 18 70 12  @option ";
     	my($rslt) = qx{ $dlg };
     	my($status) = $? >> 8;

	undef @option;

	
	if ( $status == 0){
		
		return $rslt;
	}else{
		return;
	}



}

## Change profile

sub change_profile(){
	my $BACKTITLE=" \"OSSIM Setup :: Actual profile/s @profiles_arr :: Version: $config{'version'}\"";
	my $TITLE="OSSIM Setup :: Change Profile";
	my $BODY="You can change the following information:";

	my $opt=1;
	
	my $active_profile="off";
	if ( ( exists $profile{'database'} )){ $active_profile="on"; }
		
		push(@option,"\"Database\" \"Profile\" \"$active_profile\""); $opt++;
	if ( ( exists $profile{'server'} )){ $active_profile="on"; }
		push(@option,"\"Server\" \"Profile\" \"$active_profile\""); $opt++;
	if ( ( exists $profile{'framework'} )){  $active_profile="on"; }
		push(@option,"\"Framework\" \"Profile\" \"$active_profile\""); $opt++;
	if ( ( exists $profile{'sensor'} )){  $active_profile="on"; }
		push(@option,"\"Sensor\" \"Profile\" \"$active_profile\""); $opt++;


	
	#20 61 5 
	my($dlg) = "$dbinary --stdout --exit-label \"back\" --title \"$TITLE\" --backtitle $BACKTITLE --checklist \"$BODY\" 18 70 12  @option ";
     	my($rslt) = qx{ $dlg };
     	my($status) = $? >> 8;

	undef @option;
	if ( $status == 0){
		$newconf{'profile'} = $rslt;
		$newconf{'profile'} =~ s/ /, /g;
		return $rslt;
		
	}else{
		 #exit 0;
		 return;
	}
	


}

#sub change_database_settings();
## Change server settings
## Change Framework Settings
## Change Sensor Settings
sub change_sensor_settings(){
	
	
	if ( $profile{'sensor'} =! 1 ){
		my $BACKTITLE=" \"OSSIM Setup :: Actual profile/s @profiles_arr :: Version: $config{'version'}\"";
		my $TITLE="OSSIM Setup :: Change Sensor Settings";
		my($dlg) = "$dbinary --stdout --title \"$TITLE\" --backtitle $BACKTITLE --msgbox \"sorry profile sensor not found.\" 18 70 12  @option ";
     	my($rslt) = qx{ $dlg };
     	my($status) = $? >> 8;

		undef @option;
		if ( $status == 0){
			return $rslt;
		}else{
			return;
		}
		
		
		
	}	
	
	
	
	my $BACKTITLE=" \"OSSIM Setup :: Actual profile/s @profiles_arr :: Version: $config{'version'}\"";
	my $TITLE="OSSIM Setup :: Change Sensor Settings";

		
	
	my $BODY="You can change the following information:";
	my $opt=1;
	

	push(@option,"\"$opt\" \"Select interfaces in promiscuous mode\""); $opt++ ;
	push(@option,"\"$opt\" \"Select the networks that you want to monitor\""); $opt++ ;
	push(@option,"\"$opt\" \"Select detector plugins\""); $opt++;
	push(@option,"\"$opt\" \"Select monitor plugins\""); $opt++;
	push(@option,"\"$opt\" \"Active/inactive Netflow\""); $opt++;
	
	
	my($dlg) = "$dbinary --stdout --title \"$TITLE\" --backtitle $BACKTITLE --menu \"$BODY\" 18 70 12  @option ";
     	my($rslt) = qx{ $dlg };
     	my($status) = $? >> 8;

	undef @option;
	if ( $status == 0){
		return $rslt;
	}else{
		return;
	}
	
	
	
}
sub change_sensor_promisc_interface(){
	
		

	my $BACKTITLE=" \"OSSIM Setup :: Select interfaces in promiscuous mode :: Version: $config{'version'}\"";
	my $TITLE="OSSIM Setup :: Select interfaces in promiscuous mode";
	my $BODY="You can select the promiscuous interfaces:";

	my $opt=1;
	
	
		foreach my $systemDevice (@systemDev){
						
		
				my $administration_iface="";
				
			if ( grep(/$systemDevice/, @sensor_interfaces_arr) ){$active_profile="on"; }
			if ( $config{'interface'} eq $systemDevice ) { $administration_iface="(admin)"; }	
		 			
				push(@option,"\"$systemDevice\" \"$administration_iface\" \"$active_profile\""); $opt++;
		
	}

		my($dlg) = "$dbinary --stdout --title \"$TITLE\" --backtitle $BACKTITLE --checklist \"$BODY\" 18 70 12  @option ";
     		my($rslt) = qx{ $dlg };
     		my($status) = $? >> 8;

		undef @option;
		if ( $status == 0){
			$newconf{'sensor_interfaces'} = $rslt;
			$newconf{'sensor_interfaces'} =~ s/ /, /g;
			return $rslt;
		
		}else{
			return;
		}
	
	
	
}
sub select_detector_plugins(){

	my @detector_plugins_list;
	my @files=`ls /etc/ossim/agent/plugins/`;

		foreach my $file (@files) {

        		@plug=split( /\./,$file);
        		
        		if ( $file !~ m/-monitor/o && $file !~ m/_eth/o ){
        		
				
			
				if (( "$file" =~ m/\.cfg$/ ) || ( $file =~ m/cfg\.local$/ )){
						
       					push(@detector_plugins_list,"$plug[0]"); #if $file !~ m/-monitor/o ;
       				}	
        		}
		}
	
	
	my $BACKTITLE=" \"OSSIM Setup :: Select plugins :: Version: $config{'version'}\"";
	my $TITLE="OSSIM Setup :: Select detector plugins";
	my $BODY="You can select the detector plugins:";

	my $opt=1;
	
	
	foreach my $exst_plugin (@detector_plugins_list){
	
		my $active_profile="off";

			foreach my $match_plugin (@sensor_detectors_arr ){
				if ( $exst_plugin eq $match_plugin ){$active_profile="on"; }
				
			}	
	
		push(@option,"\"$exst_plugin\" \"\" \"$active_profile\""); $opt++;
	
	}

	my($dlg) = "$dbinary --stdout --title \"$TITLE\" --backtitle $BACKTITLE --checklist \"$BODY\" 18 70 12  @option ";
     	my($rslt) = qx{ $dlg };
     	my($status) = $? >> 8;

	undef @option;
	if ( $status == 0){
		
		$newconf{'sensor_detectors'} = $rslt;
		$newconf{'sensor_detectors'} =~ s/ /, /g;
		return $rslt;
				
	}else{
		return;
	}
}
sub select_monitor_plugins(){

	my @monitor_plugins_list;
	my @files=`ls /etc/ossim/agent/plugins/`;

		foreach my $file (@files) {

        		@plug=split( /\./,$file);
        		if (( "$file" =~ m/\.cfg$/ ) || ( $file =~ m/cfg\.local$/ )){
					push(@monitor_plugins_list,"$plug[0]") if $file =~ m/-monitor/o ;
				}
		}
	
	my $BACKTITLE=" \"OSSIM Setup :: Select plugins :: Version: $config{'version'}\"";
	my $TITLE="OSSIM Setup :: Select detector plugins";
	my $BODY="You can select the detector plugins:";

	my $opt=1;
	
	
	foreach my $exst_plugin (@monitor_plugins_list){
	
		my $active_profile="off";

			foreach my $match_plugin (@sensor_monitors_arr ){
				if ( $exst_plugin eq $match_plugin ){$active_profile="on"; }
				
			}	
	
		push(@option,"\"$exst_plugin\" \"\" \"$active_profile\""); $opt++;
	
	}

	my($dlg) = "$dbinary --stdout --title \"$TITLE\" --backtitle $BACKTITLE --checklist \"$BODY\" 18 70 12  @option ";
     	my($rslt) = qx{ $dlg };
     	my($status) = $? >> 8;

	undef @option;
	if ( $status == 0){
		$newconf{'monitor_detectors'} = $rslt;
		$newconf{'monitor_detectors'} =~ s/ /, /g;
		return $rslt;
		
	}else{
		return;
	}
}
sub select_netflow(){
	
	my $BACKTITLE=" \"OSSIM Setup :: Actual profile/s @profiles_arr :: Version: $config{'version'}\"";
	my $TITLE="OSSIM Setup :: Netflow";
	my $BODY="Active Netflow:";

	my $opt=1;
	
	my $active_profileyes;
	my $active_profileno;
	if ( $config{'netflow'} eq "yes" ){ 
			$active_profileyes="on"; 
			$active_profileno="off";
	}else{
			$active_profileyes="off"; 
			$active_profileno="on";
		
	}
		
		push(@option,"\"yes\" \"Profile\" \"$active_profileyes\""); $opt++;
		push(@option,"\"no\" \"Profile\" \"$active_profileno\""); $opt++;
		


	
	#20 61 5 
	my($dlg) = "$dbinary --stdout --exit-label \"back\" --title \"$TITLE\" --backtitle $BACKTITLE --radiolist \"$BODY\" 18 70 12  @option ";
     	my($rslt) = qx{ $dlg };
     	my($status) = $? >> 8;

	undef @option;
	if ( $status == 0){
		$newconf{'netflow'} = $rslt;
		return $rslt;
		
	}else{
		 #exit 0;
		 return;
	}
	
}
sub select_network_to_monit(){
	
my $BACKTITLE=" \"OSSIM Setup :: Actual profile/s @profiles_arr :: Version: $config{'version'}\"";
	my $TITLE="OSSIM Setup :: Configure Network";
	my $BODY="Specify the networks that you want to monitor in CIDR format separated by commas (Ex: 192.168.0.0/24,10.0.0.0/8):";


	my($dlg) = "$dbinary --stdout --title \"$TITLE\" --backtitle $BACKTITLE --inputbox \"$BODY\" 18 70 \"$config{'sensor_networks'}\"  ";
     	my($rslt) = qx{ $dlg };
     	my($status) = $? >> 8;

	undef @option;
	if ( $status == 0){
		$newconf{'sensor_networks'} = $rslt;
		return $rslt;
	}else{
		return;
	}
	
	
	
}

sub write_ossim_conf(){
	
	my $write_is_needed=0;
	
	my $ConfigFile      = Config::Tiny->new();
	$ConfigFile = Config::Tiny->read($config_file);
	

					if ((exists $newconf{'profile'})){
						if ( $newconf{'profile'} ne $config{'profile'} ){
								$ConfigFile->{_}->{profile} = $newconf{'profile'};
								$write_is_needed=1;
						}
					}
				


				if ((exists $newconf{'admin_interface'})){
						if ( $newconf{'admin_interface'} ne $config{'interface'} ){
								$ConfigFile->{_}->{interface} = $newconf{'admin_interface'};
								$write_is_needed=1;
						}
					}
					if ((exists $newconf{'hostname'})){
						if ( $newconf{'hostname'} ne $config{'hostname'} ){
							$ConfigFile->{_}->{hostname} = $newconf{'hostname'};
							$write_is_needed=1;
							
						}
					}
					
					if ((exists $newconf{'email_notify'})){
						if ( $newconf{'email_notify'} ne $config{'email_notify'} ){
							$ConfigFile->{_}->{email_notify} = $newconf{'email_notify'};
							$write_is_needed=1;
						}
					}
					
					if ((exists $newconf{'firewall_active'})){
						if ( $newconf{'firewall_active'} ne $config{'firewall_active'} ){
							$ConfigFile->{firewall}->{active} = $newconf{'firewall_active'};
							$write_is_needed=1;
						}
					}

					if ((exists $newconf{'sensor_detectors'})){
						if ( $newconf{'sensor_detectors'} ne $config{'sensor_detectors'} ){
							my $la="$newconf{'sensor_detectors'}";
							$ConfigFile->{sensor}->{detectors} = $la;
							$write_is_needed=1;
						}
					}
					
					
					
					
					if ((exists $newconf{'monitor_detectors'})){
						if ( $newconf{'monitor_detectors'} ne $config{'monitor_detectors'} ){
							my $la="$newconf{'monitor_detectors'}";
							$ConfigFile->{sensor}->{monitors} = $la;
							$write_is_needed=1;
						}
					}

					if ((exists $newconf{'sensor_interfaces'})){
						if ( $newconf{'sensor_interfaces'} ne $config{'sensor_interfaces'} ){
							my $la="$newconf{'sensor_interfaces'}";
							$ConfigFile->{sensor}->{interfaces} = $la;
							$write_is_needed=1;
						}
					}



					if ((exists $newconf{'netflow'}	)){
						if ( $newconf{'netflow'} ne $config{'netflow'} ){
							my $la="$newconf{'netflow'}";
							$ConfigFile->{sensor}->{netflow} = $la;
							$write_is_needed=1;
						}
					}

					if ((exists $newconf{'sensor_networks'}	)){
						if ( $newconf{'sensor_networks'} ne $config{'sensor_networks'} ){
							my $la="$newconf{'sensor_networks'}";
							$ConfigFile->{sensor}->{networks} = $la;
					
							$write_is_needed=1;
						}
					}


					if ( $write_is_needed == 1 ){
	
							system("cp /etc/ossim/ossim_setup.conf /etc/ossim/ossim_setup.conf_last");
                                                        system("chmod 640 /etc/ossim/ossim_setup.conf_last");
							$ConfigFile->write($config_file);
							my $command="sed -i \"s:\\\"::g\" /etc/ossim/ossim_setup.conf";
							system($command);
							
					}
}



## Save & Exit

sub save_exit(){
					my $write_is_needed=0;
					my $profiles = $newconf{'profiles'};
					#my $BODY="Profiles: $profiles";
					my @BODY;
									
					push(@BODY,"Profiles: $profiles\n");
					push(@BODY,"--------------------------------------------------------------\n");

					if ((exists $newconf{'profile'})){
						if ( $newconf{'profile'} ne $config{'profile'} ){
								push(@BODY,"Admin iface : $newconf{'profile'} -- (current: $config{'profile'})\n");
								$write_is_needed=1;
						}
					}
				
					
					if ((exists $newconf{'admin_interface'})){
						if ( $newconf{'admin_interface'} ne $config{'interface'} ){
							push(@BODY,"Admin iface : $newconf{'admin_interface'} -- (current: $config{'interface'})\n");
							$write_is_needed=1;
						}
					}
					if ((exists $newconf{'hostname'})){
						if ( $newconf{'hostname'} ne $config{'hostname'} ){
							push(@BODY,"Hostname : $newconf{'hostname'} -- (current: $config{'hostname'})\n");
							$write_is_needed=1;
						}
					}
					
					if ((exists $newconf{'email_notify'})){
						if ( $newconf{'email_notify'} ne $config{'email_notify'} ){
							push(@BODY,"Email : $newconf{'email_notify'} -- (current: $config{'email_notify'})\n");
							$write_is_needed=1;
						}
					}
					
					if ((exists $newconf{'firewall_active'})){
						if ( $newconf{'firewall_active'} ne $config{'firewall_active'} ){
							push(@BODY,"Firewall active : $newconf{'firewall_active'} -- (current: $config{'firewall_active'})\n");
							$write_is_needed=1;
						}
					}
					
					if ((exists $newconf{'sensor_detectors'})){
						if ( $newconf{'sensor_detectors'} ne $config{'sensor_detectors'} ){
							push(@BODY,"Detectors : $newconf{'sensor_detectors'} -- (current: $config{'sensor_detectors'})\n");
							$write_is_needed=1;
						}
					}
					
					if ((exists $newconf{'monitor_detectors'})){
						if ( $newconf{'monitor_detectors'} ne $config{'monitor_detectors'} ){
							push(@BODY,"Detectors : $newconf{'monitor_detectors'} -- (current: $config{'monitor_detectors'})\n");
							$write_is_needed=1;
						}
					}

					if ((exists $newconf{'sensor_interfaces'})){
						if ( $newconf{'sensor_interfaces'} ne $config{'sensor_interfaces'} ){
							my $la="$newconf{'sensor_interfaces'}";
							push(@BODY,"Promisc_iface : $newconf{'sensor_interfaces'} -- (current: $config{'sensor_interfaces'})\n");
							$write_is_needed=1;
						}
					}
					
					
					if ((exists $newconf{'netflow'}	)){
						if ( $newconf{'netflow'} ne $config{'netflow'} ){
							push(@BODY,"Netflow : $newconf{'netflow'} -- (current: $config{'netflow'})\n");
							$write_is_needed=1;
						}
					}
					
					
					if ((exists $newconf{'sensor_networks'}	)){
						if ( $newconf{'sensor_networks'} ne $config{'sensor_networks'} ){
							push(@BODY,"Networks to monit : $newconf{'sensor_networks'} -- (current: $config{'sensor_networks'})\n");
							$write_is_needed=1;
						}
					}
				
					#push(@BODY,"Snmpd      : $config{'snmpd'} -- (current: $newconf{'snmpd'})\n");
					#push(@BODY,"Snmptrap   : $config{'snmptrap'} -- (current: $newconf{'snmptrap'})\n");
					#push(@BODY,"Comunity   : $config{'snmp_comunity'} -- (current: $newconf{'snmp_comunity'})\n");
					
					if ($write_is_needed == 0 ){
							push(@BODY,"No changes in config.");
						
					}
					
					#my($dlg) = "$dbinary --stdout --title \"$TITLE\" --backtitle $BACKTITLE --checklist \"$BODY\" 18 70 12  @option ";
					my($dlg)="$dbinary --stdout  --yesno \"@BODY\" 18 70";
				     	my($rslt) = qx{ $dlg };
     					my($status) = $? >> 8;

					if ( $status == 0 ){
						
						write_ossim_conf();
						
							if ($write_is_needed == 1 ){
								system("ossim-reconfig");
						
							}
				
				
						exit 0;
					
					}


}

sub main(){


	display_type();
	#current_config();
	read_profile();

	firewall_status();

	while ( True ){
				
		read_profile();
	
		if ( $profile{'framework'} == 1 ){
								
								
				my $framework_menu = main_menu_framework();
								
				given ($framework_menu) {		
						when ( m/1/ ) { my $initm = initial_menu();}
						when ( m/2/ ) { my $initm_group = initial_menu_config_group();}
						when ( m/3/ ) { $mtcmp = $systemuuid; }
				}		
								
								
					remote_system_info() if ( $mtcmp ne "" );
							
								
								
				
				#print "$mtcmp";
				
				
				
	
		}
		
		exit 0;
		my $res = main_menu();
		given ($res) {
			when ( m/1/ ) { my $general = general_setting();
				if ( $general == 1) { change_interface(); } 
				if ( $general == 2) { system("dpkg-reconfigure tzdata"); }
				if ( $general == 3) { change_hostname(); }
				if ( $general == 4) { system("apt-get update && apt-get dist-upgrade") ; }
				#if ( $general == 5) { snmp_settings(); }
				if ( $general == 5) {config_email_notification(); }
				if ( $general == 6) {config_firewall(); }

			}
			when ( m/2/ ) { 
					my $log = view_log(); 
						
						#if ( $log == 1 ) { system("$dbinary --textbox /var/log/syslog 18 70"); }
						#if ( $log == 2 ) { system("$dbinary --textbox /var/log/ossim/server.log 18 70"); }
						#if ( $log == 3 ) { system("$dbinary --textbox /var/log/ossim/agent.log 18 70"); }
						#if ( $log == 4 ) { system("$dbinary --textbox /var/log/ossim/agent_error.log 18 70"); }
						#if ( $log == 5 ) { system("$dbinary --textbox /var/log/ossim/frameworkd.log 18 70"); }
						#if ( $log == 6 ) { system("$dbinary --textbox /var/log/ossim/kern.log 18 70"); }


						if ( $log == 1 ) { system("less /var/log/syslog"); }
						if ( $log == 2 ) { system("less /var/log/ossim/server.log"); }
						if ( $log == 3 ) { system("less /var/log/ossim/agent.log"); }
						if ( $log == 4 ) { system("less /var/log/ossim/agent_error.log"); }
						if ( $log == 5 ) { system("less /var/log/ossim/frameworkd.log"); }
						if ( $log == 6 ) { system("less /var/log/ossim/kern.log"); }


			}
			when ( m/3/ ) { 
					my $chprofile = change_profile(); 
			}
#			when ( m/4/ ) {
#				
#					my $dbsetting = change_database_settings();	
#			}
			
			when ( m/4/ ) {
				
				 if ( $profile{'server'} ne "1"){
				   		system ("$dbinary --msgbox \"Sorry profile server not found\" 10 30");
						next;
				   }
				
				 
					my $serverset = server_setting();
					
						if ( $serverset eq "Get" ) { server_setting_get();} 
						if ( $serverset eq "Set" ) { 
								my $lic=server_setting_set();
								if ( $lic ne "" ){
									system("cd /tmp/ ; wget http://data.alienvault.com/${lic}/binary/Packages.gz > /dev/null 2>&1");
									if ( -f "/tmp/Packages.gz" ){
										
										my $parsconffile = Config::Tiny->new();
										$parsconffile = Config::Tiny->read($config_file);
										$parsconffile->{server}->{server_pro} = "yes";
										$parsconffile->{server}->{server_license} = "${lic}";
										$parsconffile->write($config_file);
										
										system("repo_shared=\"deb http://data.alienvault.com/debian_shared/ binary/\" ; grep \"\$repo_shared\" /etc/apt/sources.list || echo \$repo_shared >> /etc/apt/sources.list");
										system("client_rep=\"deb http://data.alienvault.com/${lic}/ binary/\" ; grep \"\$client_rep\" /etc/apt/sources.list || echo \$client_rep >> /etc/apt/sources.list");		
										system ("$dbinary --msgbox \"The key introduced for OSSIM alienvault professional server  is valid.\" 10 30");
								
								
								
								
								
										system ("rm -rf /tmp/Packages.gz");
										
										
									}else{
										system ("$dbinary --msgbox \"Sorry license not found.\" 10 30");
										
									}
									
									
									
								}
						
						
						}
			}

			when ( m/5/ ) {
				
				   if ( $profile{'sensor'} ne "1"){
				   		system ("$dbinary --msgbox \"Sorry profile sensor not found\" 10 30");
						next;
				   }
				
				 
					my $sensorset = change_sensor_settings();
					
						if ( $sensorset == 1) { change_sensor_promisc_interface();}
						if ( $sensorset == 2) { select_network_to_monit();}
						if ( $sensorset == 3) { select_detector_plugins();}
						if ( $sensorset == 4) { select_monitor_plugins();} 
						if ( $sensorset == 5) { select_netflow();}
			}


			when ( m/6/ ) { save_exit(); }

		}

	}

}




main();






