package avstatrrd;
#
# jdelacasa@alienvault.com
# http://www.alienvault.com
#
use v5.10;
use strict;
use warnings;
#use diagnostics;

#use File::Basename;
#use File::Copy;
#use Perl6::Slurp;
#use Data::Dumper;

use vars qw(@ISA @EXPORT @EXPORT_OK $VERSION);
use Exporter;
@ISA = qw(Exporter);
@EXPORT = qw(avstatrrd_thread);
@EXPORT_OK = qw();
my $module_name = "avstatrrd";
my $VERSION = 1.00;

use AV::Log::File;
use AV::ConfigParser;
use Avconfigd;
use Avstatistic;
use threads;

sub avstatrrd_thread(){
	

	threads->detach();
	my $interval = 60;
	
	my $i = 1;
	while (1){
		
		
		my %config = AV::ConfigParser::current_config;
	
		my @p_database;
		my @p_server;
		my @p_framework;
		my @p_sensor;
		my @profiles_arr;
	
		if ($config{'profile'} eq "all-in-one"){
			@profiles_arr = ("Server","Database","Framework","sensor");
		}else{
			@profiles_arr = split( /,\s*/,     $config{'profile'} );	
		}
	
	
	
		foreach my $profile (@profiles_arr){

			given($profile){
				when ( m/Database/ ) { @p_database=("mysql"); }
				when ( m/Server/ ) { @p_server="ossim-server"; }
				when ( m/Framework/ ) { @p_framework=("ossim-framework","perl -w /usr/nfsen/bin/nfsend","nfsend-comm");; }
				when ( m/Sensor/ ) { @p_sensor=("ossim-agent","snort","fprobe","arpwatch"); }
			}	

		}
		my @process;
		push(@process,@p_database);
		push(@process,@p_server);
		push(@process,@p_framework);
		push(@process,@p_sensor);
		
		my @rec_proc;
		
		my %sysconf = Avstatistic::get_iostat_pstat(@process);
 
 		#my $content;
		
		for my $key ( keys %sysconf ) {
				my $value = $sysconf{$key};
					
				my @proc_ava = split("___",$key);
				my $proc_name = $proc_ava[1];
					#$content = " $key => $value" . "---" . $content;
					#$content = "($i)  $key => $value";
				push(@rec_proc,$proc_name);
					#$content = $proc_name ;
					#console("$content");
					
					
			}
				
		#clean uniq
			
		my @unicos = keys %{ {map {$_=>1} @rec_proc} };
		
		foreach my $procces (@unicos){
			
				#
				# rrd
				#
				
				my $rrd_file = "$configd{'daemon.regdir'}/local/bbdd/avstatrrd_$procces.rrd";
				if ( ! -f "$rrd_file" ){
					
					my $interval_1h = 3600/$interval ;  # 1 hora = 3600 seg
					my $interval_2h = 7200/$interval ;  #2 horas = 7200 seg
					my $interval_6h = 21600/$interval ; #6 horas = 21600 seg
					my $interval_12h_pre = 10 * $interval ; # solo cogemos cada 10 mediciones.
					my $interval_12h = 43200/$interval_12h_pre ; # 12 horas = 43200 seg
					my $interval_1w_pre = 30 * $interval; # 1 semana =  7x24x60x60=604800 segundos
					my $interval_1w = 604800/$interval_1w_pre ; # 1 semana =  7x24x60x60=604800 segundos
					#24 horas = 86400 seg
					my $interval_d = $interval * 2;
					
					system("mkdir -p $configd{'daemon.regdir'}/local/bbdd/") if ( ! -d "$configd{'daemon.regdir'}/local/bbdd/" );
		
					my $rrd_command = "
						rrdtool create $rrd_file --step $interval
						DS:disk_read:GAUGE:$interval_d:0:U
						DS:disk_write:GAUGE:$interval_d:0:U
						DS:disk_swapin:GAUGE:$interval_d:0:U
						DS:disk_io:GAUGE:$interval_d:0:U
						DS:cpu:GAUGE:$interval_d:0:U
						DS:mem:GAUGE:$interval_d:0:U
						DS:vsz:GAUGE:$interval_d:0:U
						DS:rss:GAUGE:$interval_d:0:U
						RRA:AVERAGE:0.5:1:$interval_1h
						RRA:AVERAGE:0.5:1:$interval_2h
						RRA:AVERAGE:0.5:1:$interval_6h
						RRA:AVERAGE:0.5:10:$interval_12h
						RRA:AVERAGE:0.5:30:$interval_1w
						RRA:MAX:0.5:1:$interval_1h
						RRA:MAX:0.5:1:$interval_2h
						RRA:MAX:0.5:1:$interval_6h
						RRA:MAX:0.5:10:$interval_12h
						RRA:MAX:0.5:30:$interval_1w
						RRA:MIN:0.5:1:$interval_1h
						RRA:MIN:0.5:1:$interval_2h
						RRA:MIN:0.5:1:$interval_6h
						RRA:MIN:0.5:10:$interval_12h
						RRA:MIN:0.5:30:$interval_1w" ;
				
		
					$rrd_command =~ s/\n//g;
					$rrd_command =~ s/\t/ /g;
					verbose("Build rrd database: $rrd_command");
					system("$rrd_command");
				}
			
			
				#
				# update rrd database
				#
				
				my $io_disk_read = $sysconf{"io_disk_read___".$procces};
				my $io_disk_write = $sysconf{"io_disk_write___".$procces};
				my $io_swapin= $sysconf{"io_swapin___".$procces};
				my $io_io = $sysconf{"io_io___".$procces};

				
				my $ps_cpu = $sysconf{"ps_cpu___".$procces};
				my $ps_mem = $sysconf{"ps_mem___".$procces};
				my $ps_vsz = $sysconf{"ps_vsz___".$procces};
				my $ps_rss = $sysconf{"ps_rss___".$procces};
			
				
				my $cmd = "rrdtool update $rrd_file N:$io_disk_read:$io_disk_write:$io_swapin:$io_io:$ps_cpu:$ps_mem:$ps_vsz:$ps_rss";
				verbose("update rrd");
				debug("update rrd: $cmd");
				system($cmd);
			
			
			
=pod
				my @val;
				verbose("Procces $procces ---------------------------------------------------");
				
				for ( keys %sysconf ) {
					my @proc_ava = split("___",$key);
					my $proc_name = $proc_ava[1];
					if (/${procces}$/){
							#verbose("$_ -> $sysconf{$_}");
							
							
							push(@val,$_);
														
							
							
					} 
				
			
				}
				
				
				@val = sort {$a cmp $b } @val;
				
				foreach (@val){
								verbose("$_ -> $sysconf{$_}");
					
				}
				

				
=cut
				
				
				
		}
		
	
		
		
		
		#console_log_file("(((((((((((((((((((((((((($i))))))))))))))))))))))");
		#console("(((((((((((((((((((((((((($i))))))))))))))))))))))");
		#verbose("(((((((((((((((((((((((((($i))))))))))))))))))))))");

		$i++;
		sleep $interval;
	}
	
	
}

sub console() {
		my $msg = shift;
		console_log_file("THREAD->$module_name : $msg");
	
	
}

sub verbose (){
		my $msg = shift;
		verbose_log_file("THREAD->$module_name : $msg");
		
}

sub debug (){
		my $msg = shift;
		debug_log_file("THREAD->$module_name : $msg");
		
}

1;
